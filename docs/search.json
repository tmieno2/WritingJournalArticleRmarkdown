[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Writing Reproducible Journal Articles using Rmarkdown",
    "section": "Welcome",
    "text": "Welcome\nThis book covers how to write journal articles using Rmarkdown to either WORD or PDF."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Writing Reproducible Journal Articles using Rmarkdown",
    "section": "License",
    "text": "License\nThis book is (and will always be) free to use, and is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 4.0 License."
  },
  {
    "objectID": "01_intro.html#required-knowledge",
    "href": "01_intro.html#required-knowledge",
    "title": "1  Introduction",
    "section": "1.1 Required knowledge",
    "text": "1.1 Required knowledge\nThis book assumes you\n\nhave basic understanding of how Rmarkdown works (This is an excellent introduction to Rmarkdown)\nknow how to write mathematical equations using latex(-like) syntax\nknow how to use a citation manager (you should know this anyway if you are a scholar) including but not limited to\n\nBibtex/Biblatex\nEndNote"
  },
  {
    "objectID": "01_intro.html#what-can-you-do-with-rmarkdown",
    "href": "01_intro.html#what-can-you-do-with-rmarkdown",
    "title": "1  Introduction",
    "section": "1.2 What can you do with Rmarkdown?",
    "text": "1.2 What can you do with Rmarkdown?\nIn a single Rmarkdown file,\n\ninclude (and run) R codes to\n\nrun statistical or modeling analysis\n\ncreate figures (e.g., the ggplot2 package)\ncreate tables (e.g., the modelsummary and flextable packages)\n\nrefer to the R objects generated (data, tables, figures) to place them in the output WORD file\ncross-reference tables and figures using special syntaxes\ncreate citations and a reference list automatically using special syntaxes\nformat citation and reference using Citation Style Language\nuse Latex(-like) math syntax to write equations (different for PDF and WORD)\nuse markdown syntax for providing a basic structure to the output document\n\nheadings (section, subsection, subsubsection)\nfootnotes\n\nformat the output document fully so you do not have to do any formatting in the output document (if you are writing to PDF, not WORD)."
  },
  {
    "objectID": "01_intro.html#why-rmarkdown",
    "href": "01_intro.html#why-rmarkdown",
    "title": "1  Introduction",
    "section": "1.3 Why Rmarkdown",
    "text": "1.3 Why Rmarkdown\nRmarkdown let you avoid the following:\n\nManual copying and pasting of tables and figures\nManual formatting of tables and figures1\nManual updating of data-driven numbers (e.g., coefficient estimates, summary numbers) in text\n\n16 years ago when I was a graduate student, Rmarkdown did not exist (the sweave package did exist). Fairly new to the academic world, I was using R to create reports for econometrics courses or writing manuscripts before I learned how to use Latex.\n\nRun R codes and create tables (regression results, summary statistics, etc) on R, take a screenshot of the tables on R, save them as pictures\nRun R codes and create plots on R, save the plots as pictures\nImport tables and figures manually to the WORD file\nFormat tables manually on WORD\n\nThese are extremely tedious and time-consuming. When something changes (underlying data, parameter, etc), then you need to start the process all over again every time. You are probebly well aware that these changes are rather common during the process of completing a project with the final goal being publising a paper.\nThe arrival of the knitr and Rmarkdown packages have completely changed the game because you can now integrate narratives and R codes in a single file. When you knit (compile) the file, then you have everything you need in the output file in various formats (WORD, pdf, html).\nThe Rmarkdown system is now mature enough that we can write an academic manuscript in both PDF and WORD (more clumsy, but acceptable). This book provides introduction of how to do so."
  },
  {
    "objectID": "01_intro.html#word-or-pdf",
    "href": "01_intro.html#word-or-pdf",
    "title": "1  Introduction",
    "section": "1.4 WORD or PDF?",
    "text": "1.4 WORD or PDF?\nIf I am a single author of the paper and your target journal accepts Latex file after acceptance, then I would go for PDF especially when there is a template that you can take to format the output pdf file to the journal you are targeting. However, there are cases where you might want to or need to use WORD. First, there are many journals that accept only WORD files. Even if your target journal accepts PDF, your coauthors may demand that they have manuscripts in WORD so they can edit more easily."
  },
  {
    "objectID": "01_intro.html#footnotes",
    "href": "01_intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "This is more of what R can do↩︎"
  },
  {
    "objectID": "1_WORD.html#before-you-start",
    "href": "1_WORD.html#before-you-start",
    "title": "2  WORD",
    "section": "2.1 Before you start",
    "text": "2.1 Before you start\n\n\n\n\n\n\nWhat you need to know\n\n\n\nIn order for you to be able to write a complete journal article without touching WORD, you will need to learn the following if you have not.\n\nHow Rmarkdown works (This or This is a good place to start)\nHow to write mathematical expressions using Latex(-like) syntax (This can be a good start)\nCreate figures using R (any R pacakge, like ggplot2)\nCreate talbes using R with select R pacakges that are compatible with WORD output (e.g., flextable, modelsummary)\n\nPlease think carfully about the cost of learning all these skills before you invest you time in reading this chapter."
  },
  {
    "objectID": "1_WORD.html#preparation",
    "href": "1_WORD.html#preparation",
    "title": "2  WORD",
    "section": "2.2 Preparation",
    "text": "2.2 Preparation\nBefore diving in, please do the followings:\n\nGo here and download all the files including sample_to_word.rmd, which we refer to as the sample rmd file throughout this chapter. Alternatively, you can clone this Github repository, go to the Resources/WORD/ folder.\nOpen RStudio (or any other software you you may be using like VS code) and knit sample_to_word.Rmd to produce sample_to_word.docx, which we refer to as the sample WORD file.\nInstall the following packages if you have not\n\nofficedown\nflextable\nofficer\nknitr\nRmarkdown\ntidyverse\nmodelsummary"
  },
  {
    "objectID": "1_WORD.html#baisc-workflow-until-publication",
    "href": "1_WORD.html#baisc-workflow-until-publication",
    "title": "2  WORD",
    "section": "2.3 Baisc workflow until publication",
    "text": "2.3 Baisc workflow until publication\nHere are the proposed steps to generate a fully publication-ready article:\n\nWrite an Rmarkdown file and knit to a WORD file without worrying about formatting your manuscript (Most journals do not require manuscript formatting until the manuscript is accepted. But, please do check yourself if it is indeed the case)\nIterate between the authors until ready for submission\nSubmit your manuscript (no formatting just yet)\nRevise and resubmit your manuscript after iterating between the authors (the same as step 2)\nRepeat steps 2, 3, and 4 until accepted (terminate the process if rejected)\nFinally, format your manuscript to the specific requirements by the journal\n\ncreate a style reference WORD file and refer to it (see Section Section 2.6).\n\n\nNow, let’s take a closer look at Step 2. What you do in this step differs based on who your co-authors are.\n\n\n\n\n\n\nCase 1: one of your co-authors demands a WORD file for editing for him/herself\n\n\n\n\nIn this case, you knit to WORD and give the output WORD file to those authors, let them edit in WORD, and then you need to reflect the changes suggested in the WORD file to the Rmarkdown file. The last step would not exist if you are writing in WORD exclusively. However, I did not find this painful personally. Rather, this forces me to carefully inspect all the changes made by co-authors (, which of course you should do even if you are using WORD alone).\nOnce you modify the Rmarkdown file and knit to WORD, all the track changes will be lost. For the co-authors who want to see the changes you made from the previous version, simply suggest taking advantage of WORD’s capability to compare two versions of a document (see here). If they complain about doing this, just stop working with them entirely.\n\n\n\n\n\n\n\n\n\nCase 2: every single one of the authors knows how to use Rmarkdown and git\n\n\n\nIn this case, things are just so easy. You never have to get out of Rmarkdown. Just let them edit the Rmarkdown file and keep track of changes using git. Any IDE should give you a side-by-side comparison of the previous and current versions like below (Sublime Merge is used here)."
  },
  {
    "objectID": "1_WORD.html#structure-of-the-rmarkdown-file",
    "href": "1_WORD.html#structure-of-the-rmarkdown-file",
    "title": "2  WORD",
    "section": "2.4 Structure of the Rmarkdown file",
    "text": "2.4 Structure of the Rmarkdown file\nThe ramrkdown file consits mainly of two components.\n\nYAML header\nMain body\n\n\n2.4.1 YAML header\nYAML header comes at the very top of the Rmarkdown file and it lets you specify things like\n\npaper title\nauthors\ndate\nabstract\n\nIt also lets you specify various aspects of the output word file including\n\nwhether to include table of contents (toc)\nthe depth of table of contents (toc_depth)\nwhether to number sections or not (number_sections)\nhow to display plots and tables (plots, tables)\n\nalignment (align)\nprefix (pre), etc\n\n\nThis is also where you specify what files you use as bibliography, citation style, among other things. Important ones will be introduced later.\nHere is an example YAML header, which you can see in sample_to_word.rmd file.\n\n\n\n\n\nMore detailed explanation of out put options will be provided later individually when the relevant topics are discussed.\n\n\n2.4.2 Main body\nThis is everything that is below the YAML header, where narratives and R codes are written."
  },
  {
    "objectID": "1_WORD.html#control-of-some-elements-in-word-through-rmarkdown",
    "href": "1_WORD.html#control-of-some-elements-in-word-through-rmarkdown",
    "title": "2  WORD",
    "section": "2.5 Control of some elements in WORD through Rmarkdown",
    "text": "2.5 Control of some elements in WORD through Rmarkdown\n\n2.5.1 Section, subsection, subsubsections\nYou can use #, ##, ### at the beginning of the line to define sections, subsections, and subsubsections.\n\n# This becomes section title\n\n## This becomes subsection title\n\n### This becomes subsubsection title\n\n\n\n\n\n\n\nNote\n\n\n\n\nConfirm that # Materials and Methods and ## Data in sample_to_word.rmd turn into a section and subsection title in sample_to_word.docx.\nNote also that the sections and subsections are automatically numbered because number_sections: true in the YAML header.\n\n\n\n\n\n\n2.5.2 Footnote\nYou can add a footnote using ^[] like this:\n\nregular texts^[this is a footnote]\n\nFootnotes are automatically numbered.\n\n\n\n\n\n\nNote\n\n\n\nSee the Conclusion section of sample_to_word.rmd and sample_to_word.docx.\n\n\n\n\n\n2.5.3 Line and page break\nYou can create a line break by inserting the following.\n&lt;br&gt;\n\n\n\n\n\n\nTip\n\n\n\n\nIf &lt;br&gt; is placed in the same line as the one after which you want a break, then it does not give you a line break. Rather, put &lt;br&gt; in the next line.\nConfirm this by inspecting the Materials and Methods section of the sample rmd and word files.\n\n\n\nTo break a page, use\n\n`r run_pagebreak()`\n\n\n\n\n\n\n\nNote\n\n\n\nConfirm this by inspecting the end of the Introduction section of the sample rmd and word files.\n\n\n\n\n2.5.4 List\nYou can create an unordered list by simply using either +, -, or * in front of each item. For example,\n+ item 1\n+ item 2\n+ item 3\nwould print as below in the output WORD file.\n\nitem 1\nitem 2\nitem 3\n\nYou can create a nested list like below\n+ item 1\n  - item 1.1\n  - item 1.2\n+ item 2\n+ item 3\nwould print as below in the output WORD file.\n\nitem 1\n\nitem 1.1\nitem 1.2\n\nitem 2\nitem 3\n\nHere is an ordered list.\n1. item 1\n2. item 2\n3. item 3\n\nitem 1\nitem 2\nitem 3\n\n\n\n2.5.5 Bold and Italic\n\nbold font: **this becomes bold** (or __this becomes bold__)\nitalic font: *this becomes italic*\n\n\n\n\n\n\n\nNote\n\n\n\nConfirm these by comparing the first sentence in the Introduction section of the sample rmd and WORD files."
  },
  {
    "objectID": "1_WORD.html#sec-word-specify-style",
    "href": "1_WORD.html#sec-word-specify-style",
    "title": "2  WORD",
    "section": "2.6 Specifying the style of the output WORD file in detail",
    "text": "2.6 Specifying the style of the output WORD file in detail\nYou can change the style of the output WORD file either via direct control in the YAML header or via reference WORD file.\n\n\n\n\n\n\nTip\n\n\n\n\nYou first change styles direclty using the options made available by the officedown package in the YAML header Section 2.6.1\nIf the above is not sufficient, use reference WORD file to apply its style (not content) to the output WORD file Section 2.6.2\n\n\n\n\n2.6.1 Change styles in the YAML header\nYou can control the style of the output WORD file somewhat in the YAML header. For example, you can determine the page size and margins using page_size and page_margins (see the YAML header in the sample rmd file). You also have some controls on how tables and figures appear. For example, the align option lets you determine the horizontal position of tables and figures. topcaption lets you determine whether you have the caption at the top of bottom.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor the complete set of options, see Section 4 of the Officeverse book.\n\n\n\n\n2.6.2 Change styles through reference docx\nIt is almost always the case that the above approach is not sufficient to format your WORD file to the specific requirements of your target journal. In such a case, you can define the style of the output WORD file in detail using a style reference WORD file. This method can control virtually every aspect of WORD file styling. Some of the commonly customized elements among others are\n\nfont size\nfont family\nline spacing\n\nTo do this, you first create a style reference word file that follows the style and format you would like the output WORD file to have. Then, add the following to the YAML header under output: like below.\n\noutput:\n  reference_docx: word-style.docx\n\nIn our example project, word_template.docx is the reference file.\n\n\n\n\n\nOf course, only the style and format of the reference WORD file will be inherited to the output WORD file, but not its contents.\n\n\n\n\n\n\nNote\n\n\n\n\nCompared the style of sample_to_word.docx and “word_template.docx” and confirm they have the same font size and family for the narrative, sections, subsections, and subsubsection.\nUncomment reference_docx: word_template.docx in the YAML header, knit to a WORD file, and check the style of sample_to_word.dcox again\n\n\n\nYou can change the style of the reference WORD style file and save the changes. Then, the style changes will be reflected in the output WORD file when the rmd file is knitted next time.\n\n\n\n\n\n\nTip\n\n\n\nTo create a style file for your liking you may find this Microsoft tutorial and this book chapter in (xie2020r?) useful.\n\n\n\n\n2.6.3 Style change example\nThis section gives you a quick look at what it may look to be changing the style of a reference WORD file. We use word_template.docx for this demonstration. First, open the document on WORD and open the Styles Pane (If you are using Mac, it should be at the right upper corner of the document). Then you should see something like below.\n\n\n\n\n\nThen, put your cursor on anywhere in line 2 as below and you should see that the current style is changed to “1 Heading 1”, which is the name of the class (style type) the texts in line 2 belong to.\n\n\n\n\n\nNow, put your cursor at the black triangle and you should see available options including “Modify Style…”\n\n\n\n\n\nOnce you click on it, you should see a pop-up window like below.\n\n\n\n\n\nHere, you can change font family, font size, among other things. In this demonstration, let’s get rid of automatic section number. To do so, click on the “Format” button at the lower left corner of the window. Then, you should see this.\n\n\n\n\n\nPick “Numbering,” click on “None,” and hit “OK.”\n\n\n\n\n\nHit “OK” again in the previous pop-up window, then you should see this.\n\n\n\n\n\nNotice that section numbering is now gone. Now, knit the sample rmd file and confirm that the output WORD file indeed lost section numbers (subsection numbers still remain because you did not modify that part in the reference docx.)."
  },
  {
    "objectID": "1_WORD.html#citations-and-references",
    "href": "1_WORD.html#citations-and-references",
    "title": "2  WORD",
    "section": "2.7 Citations and References",
    "text": "2.7 Citations and References\n\n2.7.1 Set up\nFirst, create a reference file. Then, add the following to the YAML header (not under output:).\n\nbibliography: bibliography file name\n\nThere are various bibliography systems that can be used including BibLaTeX/BibTex (.bib), CSL-JSON (.json), EndNote (.enl) among other.\n\n\nThen, add the following to the part of rmd where you want to put references.\n::: {#refs}\n:::\nIn our example, we use a bib file and the bibliography file is named bibliography.bib and specified in the YAML header as below\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSee the sample rmd file to see how bibliography file is specified in the YAML header\nConfirm that {#refs} enclosed by :::is placed in the Reference section of the sample rmd file and confirm that references are indeed added in the Reference section of the output word file\n\n\n\n\n\n\n2.7.2 Cite and create references\nTo cite, use the following syntax:\n\n@reference_name to print “author names (year)” in the output WORD file\n[@reference_name] to print “(author names, year)” in the output WORD file\n[@reference_name_1; @reference_name_2] to print “(author names, year; author names, year)” in the output WORD file\n[-@reference_name] to print just year\n\nreference_name is the very first entry of a .bib file as in\n\n\n\n\n\nIf you are using CSL json file, then it is the id of an entry as in\n\n\n\n\n\nThe cited items are automatically added to the reference following the specified style (see the next section).\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Introduction and Reference sections in the sample rmd and WORD files to confirm this rule.\nComment out bibliography: bibliography.bib and uncomment bibliography: bibliography.csl, knit again, and check citations and references are still there. This is just an illustration of using a different bibliography file (CSL json file).\n\n\n\n\n\n\n2.7.3 Citation and Reference Style\nYou can change the citation and reference style using Citation Style Language. Citation style files have .csl extension.\n\nObtain the csl file you would like to use from the Zotero citation style repository.\nPlace the following in the YAML header (not under output:):\n\n\ncsl: csl file name \n\n\nThen, when knitted, citations and references styles reflect what the style specified by the csl file\n\nCurrently, the csl style should be set to qje.csl (citation style language for The Quarterly Journal of Economics) as below\n\n\n\n\n\nCitation and references styles in the output WORD file follows the rules for the QJE.\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for QJE\n\n\n\n\n\n\n\n\n\nReference style for QJE\n\n\n\n\n\n\n\n\nNow, comment csl: qje.csl and uncomment csl: pnas.csl so that the CSL for the Proceedings of the National Academy of Sciences (PNAS) is used, and then knit the sample rmd file.\nYou can now see that the citation style no longer respects the rules I mentioned above and also the reference style follows that of PNAS. This is because PNAS uses only numbers, but not author names or years.\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for PNAS\n\n\n\n\n\n\n\n\n\nReference style for PNAS"
  },
  {
    "objectID": "1_WORD.html#cross-referenced-tables",
    "href": "1_WORD.html#cross-referenced-tables",
    "title": "2  WORD",
    "section": "2.8 Cross-referenced Tables",
    "text": "2.8 Cross-referenced Tables\n\nCreate a table using the flextable package (this is not the only option, and will be discussed later)\nAdd an R code chunk like this:\n\n```{r, tab.id = \"table-id\", tab.cap = \"table-name\"}\ntable_ft\n```\n\ntable_ft is a flextable object.\ntable-name is the caption of the table in the output WORD file\ntable-id is the table id you can use to cross-reference\n\n\nUse \\@ref(tab:table-id) in the Rmarkdown file to cross-reference the table (table numbering in the output WORD file is automatic)\n\n\n\n\n\n\n\nImportant\n\n\n\nYou cannot use _ in the table id (- is allowed). Cross-referencing would not work with if the table id includes _.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Tables section of the sample rmd for the R codes to create a table using the flextable package and confirm that the table appears in the output WORD files\nSee the bottom of the Data subsection under the Materials and Methods section to confirm that cross-referencing is working.\n\n\n\n\n2.8.1 Packages to create tables\nOne of the disadvantages of writing to a WORD file is that some table-making R packages are not compatible with it. The flextable package is written by the same author of the officedown package, which we are using to write to a WORD file. So, naturally, a table object created by the flextable package (a flextable object) can be knitted into the output WORD without any hiccups as we saw earlier. A notable R package that does NOT work well with the output class of officedown::rdocx_document (which we are using) is the gt package. Tables created by the package is an object of class gt. Unfortunately, there is no function that lets you convert an gt object to a flextable object.\nOne of the recommended packages is the modelsummary package (especially for those who often include regression results tables and summary statistics tables). It lets you create regression results tables via the modelsummary() function and summary statistics tables via the datasummary() function1. Both functions has an option called output and you can use output = \"flextable\" to generate tables as flextable objects, which can then be included in the output file easily.\nHere are some example R codes of using the modelsummary package to create a regression results and summary statistics tables.\nRegression table\n\n#--- regressions ---#\nlm_1 &lt;- fixest::feols(mpg ~ hp + cyl, data = mtcars)\nlm_2 &lt;- fixest::feols(mpg ~ hp + cyl + wt, data = mtcars)\n\n#--- create a regression results table ---#\nmodelsummary::modelsummary(\n  list(lm_1, lm_2),\n  outpute = \"flextable\" #&lt;&lt;\n)\n\nSummary statistics table\n\nmodelsummary::datasummary(\n  mpg + hp + cyl ~ Mean + SD,\n  data = mtcars,\n  output = \"flextable\"\n)\n\n\n\n\n\n\n\nNote\n\n\n\nSee how the exactly the same codes above in the sample rmd file translates into the regression results and summary statistics tables in the output word file."
  },
  {
    "objectID": "1_WORD.html#cross-referenced-figures",
    "href": "1_WORD.html#cross-referenced-figures",
    "title": "2  WORD",
    "section": "2.9 Cross-referenced Figures",
    "text": "2.9 Cross-referenced Figures\n\n2.9.1 Figures created internally\nYou can create plots within an rmarkdown file and display them in the output WORD file. Here are the steps.\n\nCreate a plot using R\nAdd an R code chunk like this:\n\n\nfigure_g is a plot.\nfig.cap = \"caption\" adds caption as the caption of the figure\nfigure-id is the figure id used for cross-referencing\n\n```{r, fig.id = \"figure-id\", fig.cap = \"caption\"}\nfigure_g \n```\n\nUse \\@ref(fig:figure-id) in the Rmarkdown file to cross-reference the figure (figure numbering in the output WORD file is automatic)\n\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nPlease do not forget to have fig.cap = \"caption\" in the R code chunk option that output a plot. Otherwise, the plot will not be recognized as a plot in the outpur WORD file and cross-referencing will not work even though the plot will be displayed (check to confirm this by removing fig.cap = \"The Distribution of Yield by Zone\" from the R code chunk in the Figures secdion of the sample WORD file).\nYou cannot use _ in the figure id (- is allowed). Cross-referencing would not work with if the table id includes _.\n\n\n\nYou can control the size of the plots in the output WORD file, using the fig.width and fig.height options in the R code chunk. For example, fig.width = 4 would mean that the width of the plot will be 4 inches. Use the dpi option to control the resolution of the plot. The higher the dpi value, the sharper the plot is.\n\n\n\n\n\n\nTry\n\n\n\n\nChange fig.width to 2 and see what happens to the output WORD file.\nRemove the fig.cap option and see what happens to the output WORD file.\nChange the dpi value to 100 see what happens to the output WORD file.\n\n\n\n\n\n2.9.2 Importing pre-made figures\nInstead of creating plots using R code inside an Rmarkdown, we often need to import figures that were made elsewhere. You may be importing your company/university logos. You may have created plots using the ggplot2 package and saved them as pictures. In order to import a pre-made figure and cross-reference it, you can use knitr::include_graphics() as follows,\n```{r  echo = F, fig.id = \"figure-id\", fig.cap = \"figure caption\"}\nknitr::include_graphics(\"file name\")\n```\nYou can cross-reference imported figures in the same manner as the R-generated figures as shown above.\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\nIt is important to note that pdf files are not accepted2. One of the accepted files types is .png (or jpg)3. So, if you are creating figures outside of the Rmarkdown file, save it as a png file.\nIn order to change the size of the imported figure, you can use the same R chunk option of fig.width and fig.height as the internally created plots. However, you cannot control the resolution of the imported figure using dpi (naturally) because the resolution of the saved image will be respected. If you are using R to create a plot, you can set its dpi when saving it. For example, if you are using ggplot2, you can the dpi option in ggsave() will do the job.\n\n\n\n\n\n\nTry!\n\n\n\n\nChange fig.width = 3 to see its effect on the output WORD file\nChange dpi = 600 in the R code chunk for the second figure to confirmt that it does not anything"
  },
  {
    "objectID": "1_WORD.html#mathematical-equations",
    "href": "1_WORD.html#mathematical-equations",
    "title": "2  WORD",
    "section": "2.10 Mathematical equations",
    "text": "2.10 Mathematical equations\nYou can use Latex-like math syntax to write mathematical equations. For equation numbering and cross-referencing to work as discussed here, make sure that you use bookdown::word_document2 for the base_format in the YAML header as below.\n\n\n\n\n\n\n2.10.1 Math equation\nMath for WORD output is much limited compared to writing to a PDF file using Latex (when knitting to a PDF file, Rmarkdown uses Latex to render math equations). This is because Latex is NOT involved in converting Latex-like math syntax to math equations when knitted to WORD. Instead, pandoc is doing the conversion job. So, it is not surprising that not all the Latex math capabilities can be utilized when knitting to a WORD file. With that said, most of the syntaxes that you will need are the same between Rmd-to-WORD and Latex. You can use the equation (for single line of math) and align (more than equal to one equations) environments with successful cross-referencing.\n\nequation environment\nTo use an equation environment, first write math and then put (\\#eq:equation-id) at the end (but before \\end{equation}) to give an equation id to the equation. You can use \\@ref(eq:equation-id) to cross-reference the equation.\n\\begin{equation}\nMath\n(\\#eq:equation-id)\n\\end{equation}\nFor example,\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n(\\#eq:eq-1)\n\\end{equation}\nshould print like below in the output WORD file.\n\\[\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n\\end{equation}\n\\]\n\nalign environment\nThis works just like equation environment. To use an align environment, first write line(s) of math and then put (\\#eq:equation-id) at the end (but before \\end{align}) to give an equation id to the equation. You can use \\@ref(eq:equation-id) to cross-reference the equation.\n\\begin{align}\nMath\\\\ \nMath\n(\\#eq:equation-id)\n\\end{align}\nFor example,\n\\begin{align}\n AR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\n Y_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\nshould print like below in the output WORD file.\n\\[\n\\begin{align}\nAR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\nY_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\n\\]\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\n\n\n2.10.2 In-line math\nTo write a mathematical expression in line, you can enclose math expressions by $ like below.\nOur model is written as $Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z$.\nThis should appear like below in the output WORD file.\nOur model is written as \\(Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\).\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\n\n\nWORD"
  },
  {
    "objectID": "1_WORD.html#footnotes",
    "href": "1_WORD.html#footnotes",
    "title": "2  WORD",
    "section": "",
    "text": "The gtsummary package is also compatible. Use as_flex_table() to convert a gtsummary object to a flextable object.↩︎\nIf you are using Rmarkdown-PDF, you can import pdf files↩︎\nI am not aware of all the types of accepted file types.↩︎"
  },
  {
    "objectID": "2_PDF-Rmarkdown.html#preparation",
    "href": "2_PDF-Rmarkdown.html#preparation",
    "title": "3  PDF using Rmarkdown via the bookdown package",
    "section": "3.1 Preparation",
    "text": "3.1 Preparation\nBefore diving in, please do the followings:\n\nGo here and download all the files including sample_to_word.rmd, which we refer to as the sample rmd file throughout this chapter. Alternatively, you can clone this Github repository.\nKnit sample_to_word.Rmd to produce sample_to_word.docx, which we refer to as the sample WORD file.\nInstall the following packages if you have not\n\nofficedown\nflextable\nofficer\nknitr\nrmarkdown\ntidyverse\nmodelsummary"
  },
  {
    "objectID": "2_PDF-Rmarkdown.html#tables",
    "href": "2_PDF-Rmarkdown.html#tables",
    "title": "3  PDF using Rmarkdown via the bookdown package",
    "section": "3.2 Tables",
    "text": "3.2 Tables\ntab.cap does not work\n\n\nCreate the title of the table using R because you cannot add a title using tab.cap unlike adding a title to a figure using fig.cap."
  },
  {
    "objectID": "2_PDF-Rmarkdown.html#figures",
    "href": "2_PDF-Rmarkdown.html#figures",
    "title": "3  PDF using Rmarkdown via the bookdown package",
    "section": "3.3 Figures",
    "text": "3.3 Figures"
  },
  {
    "objectID": "2_PDF-Rmarkdown.html#mathematical-equations",
    "href": "2_PDF-Rmarkdown.html#mathematical-equations",
    "title": "3  PDF using Rmarkdown via the bookdown package",
    "section": "3.4 Mathematical Equations",
    "text": "3.4 Mathematical Equations\n\n3.4.1 Basics\nYou can fully take advantage of Latex math typesetting capability unlike the Rmarkdown-WORD system. This is because whatever you type inside of the following will be printed as is in the tex file when rmd file is converted to a tex file.\n```{=tex}\nwhatever you type\n```\nSo, for example, if you have the following in your rmd file,\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\n```\nthen you will the following printed in the tex file,\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\n, which will then appear as\n\\[\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\\]\nin the compiled pdf file.\nOf course, you can use other environments like align,\n```{=tex}\n\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\n\\end{align}\n```\n\\[\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\n\\end{align}\\]\n\n\n3.4.2 Cross-reference\nThere are two ways to cross-reference equations. The first option is to place (\\#eq:equation-name) at the end of the line that you would like to cross-reference. For example, (\\#eq:eqn1) is placed at the end of the equation below.\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon (\\#eq:eqn1)\n\\end{equation}\n```\nYou can then write \\@ref(eq:eqn1) to refer to the equation number.\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, you can do cross-reference as if you would do in a tex file. Specifically, you can add \\label{equation-name} at the end of the line and then write \\ref{equation-name}.\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon \\label{eq-tex}\n\\end{equation}\n```\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJust like Latex, you can use \\notag to suppress equation numbers. You can cross-reference individual lines.\n```{=tex}\n\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z \\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z (\\#eq:al-second)\n\\end{align}\n```\n\nEquation \\@ref(eq:al-second) is the second line.\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example"
  },
  {
    "objectID": "3_PDF-Quarto.html#tables",
    "href": "3_PDF-Quarto.html#tables",
    "title": "4  PDF using Quarto",
    "section": "4.1 Tables",
    "text": "4.1 Tables"
  },
  {
    "objectID": "3_PDF-Quarto.html#figures",
    "href": "3_PDF-Quarto.html#figures",
    "title": "4  PDF using Quarto",
    "section": "4.2 Figures",
    "text": "4.2 Figures"
  },
  {
    "objectID": "4_PDF-KnitrLatex.html#preparation",
    "href": "4_PDF-KnitrLatex.html#preparation",
    "title": "5  PDF using knitr and Latex",
    "section": "5.1 Preparation",
    "text": "5.1 Preparation"
  },
  {
    "objectID": "4_PDF-KnitrLatex.html#r-code-chunks",
    "href": "4_PDF-KnitrLatex.html#r-code-chunks",
    "title": "5  PDF using knitr and Latex",
    "section": "5.2 R code chunks",
    "text": "5.2 R code chunks\nIn this approach, you use the following to indicate an R code chunk:\n&lt;&lt;r chunk-name, chunk options&gt;&gt;\nR codes\n@\nThe available chunk options are basically the same as those for Rmarkdown."
  },
  {
    "objectID": "4_PDF-KnitrLatex.html#tables",
    "href": "4_PDF-KnitrLatex.html#tables",
    "title": "5  PDF using knitr and Latex",
    "section": "5.3 Tables",
    "text": "5.3 Tables\nSee\nWhen creating tables using R, you need to use functions that can write the table in Latex. Fortunately, there are plenty options. Some of the recommended packages include\n\nmodelsummary\nstargazer\ngt\ngtsummay\nxtable\nkable and kableExtra"
  },
  {
    "objectID": "4_PDF-KnitrLatex.html#figures",
    "href": "4_PDF-KnitrLatex.html#figures",
    "title": "5  PDF using knitr and Latex",
    "section": "5.4 Figures",
    "text": "5.4 Figures"
  }
]