[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Reproducible Journal Articles using R with Rmarkdown/Quarto",
    "section": "Welcome",
    "text": "Welcome\nThis book covers how to write journal articles using Rmarkdown/Quarto to either WORD or PDF.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Reproducible Journal Articles using R with Rmarkdown/Quarto",
    "section": "License",
    "text": "License\nThis book is (and will always be) free to use, and is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 4.0 License.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "C0_0_ReproducibleResearch.html#sec-rep-research",
    "href": "C0_0_ReproducibleResearch.html#sec-rep-research",
    "title": "1  Reproducible Research",
    "section": "1.1 What is reproducible research",
    "text": "1.1 What is reproducible research\nFirst of all, you may have heard of “reproducibility” and “replicability.” While they sometimes are used interchangeably, they mean different things. Here are commonly used definitions of the two terms (Cacioppo et al. 2015).\n\nReproducibility: A research study is  reproducible  if anybody (including the author of the study) can generate exactly the same results by using the same materials (e.g., data) and procedures used in the study.\nReplicability: A research study is  replicable  if other teams reach the same conclusion by applying the same procedure to the different materials (e.g., data).\n\nThis book focuses only on  reproducibility and do not deal with replicability.\nWhat makes a research project reproducible?\n\n\n\n\n\n\nMinimum requirement of reproducible research\n\n\n\nEvery single action taken during the entire research process is documented in a way that anybody can follow to implement the same actions (no hidden actions) to produce exactly the same results.\n\n\nNote that this does not necessarily mean every single action needs to be computer-programmed and automated. Even if you manually delete rows of data on Excel (highly discouraged), this does not make your research non-reproducible  as long as this action is recorded and the original data (before deletion of the rows) are provided because anybody can implement this action. Many economists use STATA as their primary software and it provides GUI for creating a figure like below.\n\n\n\n\n\n\n\n\n\n\n\nUsing a GUI like this does not inherently render your research non-reproducible. Provided you give a clear guideline on how to utilize the GUI (along with the dataset), your research remains replicable\nIt is crucial to distinguish between the quality of data and methodology and the concept of reproducibility. Let’s say a research team omits certain observations they should not have or neglects to include vital independent variables in their regression analysis. Although such oversights might compromise the reliability of their findings, they do not render the research non-reproducible. So long as those steps are documented and the data is accessible, the research can be reproduced. At its core, reproducibility is all about transparency. While ensuring reproducibility often improves the quality of results, it is important to understand that low-quality outcomes do not equate to non-reproducibility.",
    "crumbs": [
      "Reproducible Research",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "C0_0_ReproducibleResearch.html#sec-high-q-research",
    "href": "C0_0_ReproducibleResearch.html#sec-high-q-research",
    "title": "1  Reproducible Research",
    "section": "1.2 High-quality and low-quality reproducible research",
    "text": "1.2 High-quality and low-quality reproducible research\nA high-quality reproducible project exhibits the following characteristics:\nOrganized Project Folder: It maintains a well-structured and organized project folder, making it easy to locate the necessary files.\nStreamlined Automation: Workflows are automated with well-annotated computer programs, simplifying the replication process and providing clarity in the workflow.\nComprehensive Documentation: Robust documentation, encompassing data and reproduction guidance, ensures transparency, saving time on data interpretation and replication instructions.\n\n1.2.1 Organized project folder\nA well-organized project folder can substantially decrease the cost of updating and reproducing the project, primarily due to the ease of locating files. This is particularly true for those outsider the author team. When you are new to research, figuring out how to structure an organized project folder can be daunting. I recall my early days as an MS student when all sorts of files were jumbled together in a single folder, lacking any organizational structure. Datasets, code, results, figures, journal articles—everything was mixed. This haphazard arrangement made finding the right file an arduous task, significantly increasing the cost and effort required for reproduction, not only for others but also for myself and my team. A structured approach to constructing an organized project folder is detailed in Chapter 2.\n\n\n1.2.2 Streamlined Automation\n\nAutomation\n\n\n\n\n\n\nAutomated research\n\n\n\nA research project is automated if you use computer programs to perform all the procedures in your research (e.g., data processing, analysis, creating tables and figures) where possible.\n\n\nAs stated above as examples, removing rows of data in Excel or producing a figure using a GUI does not inherently render a research project non-reproducible. However, such practices are not reproduction-friendly as they elevate the time required for reproduction possibly to the point where reproduction is not reasonably feasible. Automation of such procedures can significantly reduce the cost of repeating the same procedures for other members of your team or those who are tying to reproduce the results.\nWhere automation is possible depends on the nature of the data and analysis used in the analysis. If it is a simulation analysis where data is generated by a computer program, then it is possible to automate every single step of the research. This is a fully automated reproducible research. Even if you use real-world data, it can be a fully automated research. This is when all the datasets used in the research is publicly available and downloadable through computer programs. For example, you can use PRISM weather dataset (downloadable using the prism package) and county-level corn yield data (downloadable using the tidyusda package) to estimate the impact of temperature and precipitation on corn yield. This research can be made fully reproducible from the very beginning to the end. Many research projects cannot be made fully automated because datasets are often not downloadable using a computer program even if they are publicly accessible online. If you are using data you have collected using paper surveys, then it is simply impossible to automate this process because manual entry of data is necessary.\nOne thing that is common for all these types of projects is that you can automate everything given the raw data files are stored (no matter how they are obtained). Indeed, this is the focus of this book. Starting from the next chapter, how to develop an automated reproducible project is discussed given the raw data is available and sharable.\nWhen non-sharable confidential data is used, reproducibility of the project is severely compromised. However, all the codes should be made accessible at least. Sometimes coding error can be detected even without running them.\n\nStreamlining\n\n\n\n\n\n\nImportant\n\n\n\nAn automated research project is also streamlined if your computer program does not have unnecessary complications or redundancies.\n\n\nSuppose the computer programs for reproducing results contain exploratory and experimental codes that were used during experimentation, and the crucial parts of the code responsible for generating the main results are unclear and somewhat concealed. In such cases, the programs lack streamlining, generating extraneous information that can distract those attempting to reproduce the research.\nStreamlined computer programs typically exhibit following characteristics:\n\nThe entire process is divided into smaller components based on their roles, such as data processing, analysis, and generating tables and figures.\nThe sequence in which the code segments are executed is immediately evident to anyone.\nThe inputs and outputs for each of these processes are clearly defined, and it’s easy to identify the dependencies between objects and code segments.\n\nFor example, consider a relatively simple project that consists of four main R code files.\n\nprocess_data.R\nanalyze_data.R\nmake_figures_tables.R\nrender_manuscript.R\n\nHere is the input/output relationship of these files.\n\n\n\n\n\n\n\n\n\n\n\nYou can then have a master code file that runs all the codes to complete entire process that looks like the following:\n\nsource(\"process_data.R\")\nsource(\"analyze_data.R\")\nsource(\"make_figures_tables.R\")\nsource(\"render_manuscript.R\")\n\n\nWell-organized and well-annotated code\nEach of the computer program files should be well structured/organized inside and well-annotated.\nHere is an example of well-organized and well-annotated R code file.\n\n\n\n\n\n\n\n\n\n\n\nThis R script is designed to generate a single figure and table. It is compartmentalized into two distinct sections within the file, each clearly labeled for its purpose. The first section is dedicated to “Visual illustration of the data,” while the second section focuses on generating a “Regression table.” These clear headings make it evident which part of the code serves what purpose. Additionally, you can find informative notes within each compartment, providing further context and clarifying the intent behind specific code chunks. While this example represents a straightforward R code file, it effectively illustrates the concept of organizing code for clarity and comprehension.\n\n\n1.2.3 Comprehensive documentation\nComprehensive documentation of data is paramount. Any meaningful updates or attempts at reproducing results must begin with a clear understanding of the data. To achieve this, it is imperative to provide documentation regarding the data sources and the definition of each variable (metadata). This step helps minimize the cost of understanding the data for both you and others involved in the research.\nWhen the entire research process is automated through well-annotated code, the code itself becomes an excellent form of documentation, capturing the procedures undertaken in the study. In such cases, providing a guideline on how to run the code can be beneficial and sufficient. However, if certain procedures are conducted manually, they should be meticulously documented to ensure that anyone can follow them with precision.",
    "crumbs": [
      "Reproducible Research",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "C0_0_ReproducibleResearch.html#sec-benefits",
    "href": "C0_0_ReproducibleResearch.html#sec-benefits",
    "title": "1  Reproducible Research",
    "section": "1.3 Why high-quality reproducible research?",
    "text": "1.3 Why high-quality reproducible research?\nThe main beneficiaries of reproducible research include:\n\nYou (Y)\nMembers of your team (M)\nThe scientific community (S)\n\nIndeed, reproducible research does not just benefit other scientists; it serves as an valuable aid to yourself, your future self, and your team members. Let’s delve into some of the key advantages linked to high-quality reproducible research.\nBy adhering to recommended practices for high-quality reproducible research, you and your team can benefit not only after but also during the ongoing research project. The benefits accrued during the project’s completion often outweigh those realized after the project concludes.\nSome of the benefits are listed below. Letters in the parenthesis right to the title indicate the abbreviation of the major beneficiaries listed above.\n\nScientific Integrity and Error Prevention (S)\nReproducible research offers the scientific community an opportunity to reevaluate a project and assess the reliability of its results. As a result, any errors made by the authors can be identified and corrected, potentially leading to different conclusions. This corrective process can, for instance, prevent the implementation of misguided policies and spare subsequent research endeavors from being built upon erroneous conclusions, ultimately saving researchers’ time and resources.\n\nEducational Value (MS)\nHigh-quality reproducible research serves as a valuable educational tool, especially for students new to a field. It offers numerous insights that can be gleaned from the process of reproducing such a project. In fact, I routinely encourage my students to meticulously go through one of the reproducible projects completed by my team, dissecting it line by line. This hands-on experience provides students with a practical opportunity to grasp essential aspects of reproducible research, such as streamlined automation, comprehensive documentation, and well-annotated, organized code. Moreover, they can familiarize themselves with the coding style employed by the team.\n\nRepeatability (YM)\nDuring a research project, you are likely to repeat certain procedures multiple (sometimes many) times. For instance, upon receiving new observations, you might need to reanalyze the data. If you processed and analyzed data manually using a GUI and did not save the codes, you would have to restart the entire process. In contrast, if you have coded all procedures, rerunning them is straightforward.\nScientific findings are often conveyed in tables and figures, which are frequently updated throughout research. You might, for example, identify outliers and exclude them from your analysis, necessitating changes in regression results tables. Similarly, reviewers could suggest model adjustments, prompting further updates. Crafting tables and figures manually means redoing them each time changes arise.\n\nTransferability (YM)\nOne of the key advantages of reproducible research is the seamless (or less costly) transition of project ownership. With streamlined automation with well-annotated codes and complete documentation, it is much easier to hand over the leadership of the project to another individual, whether for the continuation of the current project or as the foundation for a new project that builds upon it.\nImagine you are serving as the academic advisor to a Master’s student who, before completing the refinement of their thesis results for journal publication, transitions to a different institute, such as a Ph.D. program at a different university or a private company. In this situation, you’ve made the decision to assign the task to another student. However, if the research procedures were not well-documented, the new student may find themselves investing a substantial amount of time in understanding and processing the data before being able to conduct more advanced analyses.\nAt times, you may find yourself returning to a research project after several years, armed with new research ideas and additional observations for the same dataset. When the data is well-documented, and data processing was automated, you can seamlessly initiate new analyses without investing time in redundant data processing. However, if data processing was initially done manually in tools like Excel, you may face the need to redo these tasks, which can prove highly time-consuming.\n\nReducing Errors (YM)\nComputer-automated research has the power to significantly reduce errors commonly associated with manual processes. Consider, for instance, the task of referencing a specific statistic from a regression results table within your discussion. When results change, it is not hard to overlook updating that particular statistic in your narrative. However, with the ability to programmatically reference this statistic directly from the table within the document, achieved through tools like R Markdown and QMD, any alterations to the results will automatically update the corresponding reference in your discussion. This automation effectively eliminates the risk of manual oversight.\n\n\n\n\nCacioppo, John T, Robert M Kaplan, Jon A Krosnick, James L Olds, and Heather Dean. 2015. “Social, Behavioral, and Economic Sciences Perspectives on Robust and Reliable Science.” Report of the Subcommittee on Replicability in Science Advisory Committee to the National Science Foundation Directorate for Social, Behavioral, and Economic Sciences 1.",
    "crumbs": [
      "Reproducible Research",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "C1_1_ProjectOrganization.html#sec-rstudio-project",
    "href": "C1_1_ProjectOrganization.html#sec-rstudio-project",
    "title": "2  Project Organization",
    "section": "2.1 RStudio Project",
    "text": "2.1 RStudio Project\nWhile it is not required, it is recommended that the root project directory is designated as an RStudio Project. Here, minimal guidance on RStudio Project is provided. See an introduction to RStudio Project by Posit for more information.\n\n2.1.1 Why RStudio Project\nThere are number of benefits to using an RStudio Project. Here are some of them.\n\nIsolated Working Directory: Each RStudio project operates in its own directory, which means you can keep datasets, scripts, and other files organized. When you open a project, RStudio automatically sets the working directory to the project’s directory.\nIntegration with renv: Projects can be integrated with the renv package to manage project-specific libraries. This ensures reproducibility by having consistent package versions (see Section 2.3 for more details).\nIndependent R Sessions: Each project can have its own separate R session, reducing the risk of variables or functions from one project interfering with another. Further, since each project maintains its own environment, it’s easier to keep track of variables, loaded packages, and function definitions.\nEasy Navigation of the File System: The Files pane in RStudio will automatically be rooted at the project directory, making it easier to navigate and manage project files.\n\n\n\n2.1.2 Starting an RStudio project\nTo create (designate as) an RStudio project, first click on the Project icon at the right upper corner of RStudio IDE. You will then see menus like below:\n\n\n\n\n\n\n\n\n\n\n\nYou can then select the New Project… option, which will then give you the following popup window.\n\n\n\n\n\n\n\n\n\n\n\n\nNew Directory: As its name suggests, you will create a new directory and it will be designated as an RStudio project automatically.\nExisting Directory: If you already have a directory for your project, then you can use option to designate it as an RStudio project.\nVersion Control: You can clone a repository as a directory to your local machine and designate it as an RStudio project (This option is discussed in Section 4.3.2).\n\nAfter completing the process, you will find project_name.Rproj in the root directory. This file is a simple text document that stores important metadata and preferences specific to the project. You can determine if a directory is an RStudio project by checking for the presence of this file.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "C1_1_ProjectOrganization.html#sec-folder-structure",
    "href": "C1_1_ProjectOrganization.html#sec-folder-structure",
    "title": "2  Project Organization",
    "section": "2.2 Folder structure",
    "text": "2.2 Folder structure\nHaving a well-organized project folder system is essential, not just for reproducibility, but also for your productivity. Below is  a  suggested structure:\n\n\n/Users/tmieno2/Dropbox/TeachingUNL/JournalArticleRmarkdown/RJA_template\n├── code\n│   ├── main\n│   └── sandbox\n├── data\n│   ├── processed\n│   └── raw\n├── docs\n├── renv\n│   ├── library\n│   │   ├── R-4.2\n│   │   └── R-4.3\n│   ├── sandbox\n│   │   ├── R-4.2\n│   │   └── R-4.3\n│   └── staging\n├── results\n│   ├── figures\n│   └── tables\n└── writing\n\n\nHere’s a brief overview of the contents for each folder:\n\ncode:\n\nmain: Contains all the R (or other program) codes necessary for reproducing the project results.\nsandbox: Includes any R codes used to test or explore.\n\ndata\n\nprocessed: Stores datasets that are derivatives of the raw datasets. These are generated by codes stored in the code folder.\nraw: Houses all the raw datasets, which should never be altered.\n\ndocs: Contains any relevant documents (journal articles, data documentation, etc)\nrenv (optional): This will be discussed later in Section 2.3.\nresults: Contains all generated results, including tables, figures, regression outcomes, etc.\nwriting: The manuscript and related files, such as bibliography, citation style language file, and others.\n\nOrganizing project files in this manner streamlines directory navigation, simplifying the process of finding specific files for both you and others. As mentioned earlier, this is just a suggested structure. The ideal folder structure may vary depending on the nature of the research project. The crucial aspect is that the project folder structure should prioritize easy file retrieval for you, your future self, your team, and others.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "C1_1_ProjectOrganization.html#sec-renv",
    "href": "C1_1_ProjectOrganization.html#sec-renv",
    "title": "2  Project Organization",
    "section": "2.3 renv: Project-Specific Package Management in R (Recommended, but optional)",
    "text": "2.3 renv: Project-Specific Package Management in R (Recommended, but optional)\nThe R ecosystem is continually evolving, with packages frequently getting updated, enhanced, or even deprecated. While this dynamism is a strength, it can also lead to challenges when revisiting or sharing older R projects. The renv package can provide a robust solution to this issue.\n\n2.3.1 Why use renv?\n\nConsistent Project Environment: renv enables you to encapsulate the state of your R packages within a specific project. This encapsulation ensures that, even as the broader R ecosystem evolves, your project’s environment remains consistent.\n\nFor instance, imagine you’ve conducted an analysis, submitted your findings, and, four months later, you’re revisiting the project due to reviewer feedback. During that hiatus, you might have updated various R packages. These updates, even minor ones, could introduce changes that break your analysis or alter results. With renv, such concerns evaporate; your project-specific library safeguards against discrepancies caused by package updates.\n\nReproducibility: The renv package ensures collaborators or individuals trying to reproduce your work can emulate the exact R environment you used, right down to the versions of the packages. This precision significantly eases the reproducibility process.\n\n\n\n2.3.2 Set up renv\n\nlibrary(\"renv\")\n\nFor a new or existing project, initialize renv by:\n\nrenv::init()\n\nThis will create a directory named renv.\n\n\n\n\n\n\n\n\n\n\n\nInside the directory, you can see a directory called library. This is where the packages for the project is stored. These packages are independent of the packages that are available universally for R. The information about the packages are stored in the file called renv.lock along with the version of R as you can see below.\n\n\n\n\n\n\n\n\n\n\n\nThis is a snapshot of the current state of the library.\n\n\n\n\n\n\nImportant\n\n\n\nPackages outside of the project cannot be used. For example, suppose you have not installed tidyverse package to the project library folder, but you have for generic use of R. You will not be able to use tidyverse in the project.\n\n\nYou can install R packages as you normally would using install.packages(). These will be installed into the project’s isolated library, ensuring no interference with other projects.\nAfter adding, updating, or removing packages, snapshot the new state:\n\nrenv::snapshot()\n\nThis updates the renv.lock file to represent the current state of your library.\n\n\n2.3.3 Sharing with collaborators and reproducers\nWhen sharing the project, ensure you share the renv.lock file, but not the renv library (the actual installed packages). Your collaborators can recreate the exact environment using renv::restore(). As long as you use git, there is nothing to worry about here as the .gitignore file (generated when you run renv::init()) makes sure that the appropriate files are committed.\nFor collaborators, they can pull and then install the specific package versions by running:\n\nrenv::restore()\n\nThis consults the renv.lock file and installs the exact package versions specified. This ensures that your collaborators are not faced with errors or changes in results associated with the difference in the version of the R packages.\nFor reproducers, they can clone the project repository and run renv::restore().\n\n\n2.3.4 Deactivating and Removing renv from a Project:\nIf you decide to remove renv from a project:\n\nEnsure your project is activated with renv.\nRun:\n\n\nrenv::deactivate()\nrenv::clean()\n\nThis will remove the renv settings and library. You can also manually delete the renv.lock file and renv folder if they are still present.\n\n\n2.3.5 Other features\n\nrenv::status(): check the difference between the recorded snapshot and your current environment.\nrenv::diagnostics(): can be a helpful command for troubleshooting, if you run into problems or unexpected behaviors.\nrenv::update(): update packages.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "C1_2_DevelopProject.html#collect-and-place-datasets",
    "href": "C1_2_DevelopProject.html#collect-and-place-datasets",
    "title": "3  Project Development",
    "section": "3.1 Collect and place datasets",
    "text": "3.1 Collect and place datasets\nIn this illustration, we pretend that we have collected the flights and weather datasets from the nycflights package and they are available as CSV files.\nFirst thing you do is store these datasets in the data/raw folder. They should never be altered.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNever alter the original raw data files!\n\n\nNow, it is time to create a metadata file and position it alongside the raw data files inside the data folder. Here is an example of metadata written in a Markdown file format. You have flexibility in choosing the file format, but it should be easily readable. CSV is also a suitable option for a metadata file format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nGenerate metadata that ensures easy comprehension of variable definitions for your future self, your team, and other collaborating teams.\nMake sure the unit of variables are clear in metadata when not obvious\nPlace the metadata file under the data folder.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Development</span>"
    ]
  },
  {
    "objectID": "C1_2_DevelopProject.html#writing-r-scripts-for-data-wrangling-analysis-and-reporting",
    "href": "C1_2_DevelopProject.html#writing-r-scripts-for-data-wrangling-analysis-and-reporting",
    "title": "3  Project Development",
    "section": "3.2 Writing R scripts for data wrangling, analysis, and reporting",
    "text": "3.2 Writing R scripts for data wrangling, analysis, and reporting\nOne of the most important element for a reproducible project is automation by code:\n\n\n\n\n\n\nImportant\n\n\n\nEvery single action taken throughout the entire project is written in R scripts, whenever possible, using .r, .rmd, or .qmd files.\n\n\nThis is critical. Here are some examples of things I (and probably many of you) have done early in my career that I should not do any more.\n\nCreating tables on WORD or Latex by manually typing numbers in the cells\nTransform (reshape, define new columns, etc) data on Excel\nRun codes on console (not on an R script)\nLoad datasets using RStudio UI\n, and many more\n\nAll of these can and should be coded in R.\n\n3.2.1 Process datasets\nIn order to run the intended regression analysis, we need to transform them and combine them to have a regression-compatible dataset. To make this happen, we now create an R file called 0_process_data.R.\n\n\n\n\n\n\n\n\n\n\n\nHere is what is inside of 0_process_data.R.\n\n\n\n\n\n\n\n\n\n\n\nIn this code, the two datasets are loaded from the data/raw folder (Note that they were loaded, but were not altered in any way in their original files.). They are transformed and then merged. The merged object named reg_data is then saved into  data/processed as an RDS (R data set) file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nStore the processed datasets, which are derivatives of the raw datasets, in a separate location within the data directory, specifically in the data/processed folder.\n\n\nIt is essential to note that the codes above are sufficiently annotated in 0_process_data.R, ensuring that anyone can readily understand the purpose of each code segment (In cases involving more complex operations than those observed here, it may be necessary to provide more detailed annotations). The use of the dplyr package helps in this regard, as its functions are highly expressive about their functions1.\n\n\n\n\n\n\nImportant\n\n\n\nAnnotate your code well to facilitate effortless comprehension of the code for both your future self and others.\n\n\n\n\n3.2.2 Run analysis\nNow that we have an analysis-ready dataset, we will run regression analysis using the dataset. This analysis is written in 1_reg_analysis.R.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNumbering your R scripts in the sequence they should be executed can be highly beneficial. This approach simplifies the search process when trying to locate specific scripts.\nEmploying pipeline tools, such as the targets package, can be very useful in streamlining and organizing your coding workflow.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code reads reg_data.rds (created in 0_process_data.R) run three regressions and then combine them into a list called reg_list, which is then saved as an RDS file (named reg_results.rds) in the results folder.\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Create tables and figures\nOnce the analysis is done, you typically communicate them using either tables or figures. For this purpose, 2_make_tables_figures.R was created inside the code/main folder.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code creates a figure of the distribution of departure delay (dep_delay) by carrier faceted by origin using the ggplot2 package. This is then saved as a pdf (png for WORD because Rmarkdown-WORD cannot include pdf images) into results/figures so that it can be imported inside the rmarkdown/quarto manuscript file.\nIt also creates a table presenting the three regressions results (created in 1_reg_analysis.R) using the modelsummary package. The table was then saved as an RDS file into results/tables, which can be then read inside the rmarkdown/quarto manuscript file.\nAfter running the code, the results folder looks like this.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Development</span>"
    ]
  },
  {
    "objectID": "C1_2_DevelopProject.html#manuscript-writing",
    "href": "C1_2_DevelopProject.html#manuscript-writing",
    "title": "3  Project Development",
    "section": "3.3 Manuscript writing",
    "text": "3.3 Manuscript writing\nWe now have enough to start writing a manuscript. We intend to submit this to a journal that accepts WORD as the only format. So, we will use the Rmarkdown-WORD system (See section Chapter 6 for the detailed treatment of this subject. Section Chapter 8 presents how to use Quarto to produce a manuscript in PDF.). In the writing folder, manuscript_to_word.rmd was created.\nInside the manuscript_to_word.rmd file, you write narratives just like you would on WORD. But, you can include the figure and table we just created.\nFigure\nThe portion of the rmd file below imports the figure created in 2_make_tables_figures.R using the knitr::include_graphics() (a function to include external figures).\n\n\n\n\n\n\n\n\n\n\n\nIn the output WORD file, this would look like this:\n\n\n\n\n\n\n\n\n\n\n\nTables\nThe following code first read reg_data and then create a summary statistics table using modelsummary::datasummary().\n\n\n\n\n\n\n\n\n\n\n\nThe resulting table looks like below in the output WORD document.\n\n\n\n\n\n\n\n\n\n\n\nThe following code block was also included in the Rmarkdown file to create a regression results table.\n\n\n\n\n\n\n\n\n\n\n\nThis code first read the regression results saved as a list (created in code/main/1_reg_analysis.R), and the create a regression table using modelsummary().\nIts output is printed in the output WORD document like below:\n\n\n\n\n\n\n\n\n\n\n\nYou could alternatively create this table inside code/main/2_make_tables_figures.R, save it as an RDS file and then just import it here. Indeed, where you want to create tables (or figures) inside the manuscript or outside is up to you. You can put all the codes inside the rmd file.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Development</span>"
    ]
  },
  {
    "objectID": "C1_2_DevelopProject.html#reproducing-the-manuscript",
    "href": "C1_2_DevelopProject.html#reproducing-the-manuscript",
    "title": "3  Project Development",
    "section": "3.4 Reproducing the manuscript",
    "text": "3.4 Reproducing the manuscript\nThis manuscript is completely reproducible in a fully automated manner (of course including all the results, tables, and figures) given the raw datasets. Here is the R code in an R file (named reproduce.R) that runs everything: from data processing to producing the manuscript.\n\n\n\n\n\n\n\n\n\n\n\nREADME file",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Development</span>"
    ]
  },
  {
    "objectID": "C1_3_VersionControl.html#sec-vc-what",
    "href": "C1_3_VersionControl.html#sec-vc-what",
    "title": "4  Version Control (Optional, but recommended)",
    "section": "4.1 What is version control?",
    "text": "4.1 What is version control?\nVersion control is a system that records changes to files over time so that you can recall specific versions later. The entire history of changes you have made are recorded and you can go back to a previous version any time.\nLet’s visualize a simplified, figurative explanation of version control. Picture the olden days when tasks in an office were carried out manually: writing with pencils, using typewriters, and such. In this setting, you work with four main pieces of infrastructure for version control:  two desks and two shelves.\n\ndesk A (in-house)\ndesk B (in-house)\nshelf A (in-house)\nshelf B (outside house)\n\nAt desk A, you actively work on your project, be it writing manuscripts, coding, etc. Once you have made significant progress and wish to archive your work, you walk to the second desk (desk B). Here, you select the pieces of your work to be stored as a collection in your library (akin to staging) and duplicate the collection. You affix a sticky note to the copy detailing the nature of this collection. Then, you place this collection on shelf A, effectively archiving it (committing). Wisely, you label this collection for easy retrieval in the future (yes, you are like a trained librarian). This particular shelf resides inside your house, meaning only you can access it. However, to safeguard your progress, you create a duplicate of the collection, make a quick trip, and store it on shelf B situated outside your home (pushing to a remote repository). This way, even if a disaster strikes, like a house fire, your work remains intact and recoverable. Additionally, this external shelf can be made not as exclusive as shelf A inside your house. While others cannot take items from it, you can grant them access to replicate its contents if you wish (public v.s. private repository). You can even permit them to suggest modifications (pull requests). Upon receipt, you can evaluate these suggestions and, if suitable, integrate them into your collection on this shelf as its different version. Subsequently, you can copy (sync) these updates to your local shelf (pulling).\nFortunately for us, none of these actions are carried out physically. There is no need to “visit” Shelf B or “photocopy” your work. All these processes occur digitally, facilitated by your computer and online platforms.\nIn a more professional summary:\n\nVersion control systems serve as a reliable backup. If errors occur or work is lost, it’s possible to revert to a prior version.\nVersion control provides an audit trail for code alterations. This allows for monitoring changes, identifying contributors, and understanding the rationale behind each modification. This functionality is crucial when collaborating in teams but remains beneficial even for solo projects.\n\nAnother notable advantage of version control is its ability to significantly declutter your project folder. Have you ever found yourself creating multiple versions of the same code or manuscript and naming them by appending the modification date and your initials (especially in collaborative scenarios)? For instance:\n\nmanuscript_01_02_2023_TM.docx\nmanuscript_01_03_2023_TM_KS.docx\nmanuscript_01_07_2023_TM.docx\nmanuscript_02_01_2023_TM_NB.docx\nmanuscript_02_21_2023_TM_NB_KS.docx\nmanuscript_05_02_2023_TM.docx\n\nWhile this practice does make it clear who made modifications and when, version control automatically records this information when you archive (commit) to a version control system. Furthermore, it meticulously tracks changes between versions, making comparisons straightforward, as mentioned earlier. With version control, you can always work with a single file for a single purpose, such as manuscript.docx, simplifying file management.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Version Control (Optional, but recommended)</span>"
    ]
  },
  {
    "objectID": "C1_3_VersionControl.html#sec-git-github",
    "href": "C1_3_VersionControl.html#sec-git-github",
    "title": "4  Version Control (Optional, but recommended)",
    "section": "4.2 Set Up Git and GitHub",
    "text": "4.2 Set Up Git and GitHub\n\n4.2.1 Set Up Git\n\nInstall Git:\n\nWindows: Download from Git for Windows\nmacOS: Use Homebrew (brew install git) or download from the git website\n\nConfigure git:\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@example.com\"\n\n\n4.2.2 Sign up on GitHub:\n\nGo to GitHub.com\nSign up",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Version Control (Optional, but recommended)</span>"
    ]
  },
  {
    "objectID": "C1_3_VersionControl.html#sec-use-vc",
    "href": "C1_3_VersionControl.html#sec-use-vc",
    "title": "4  Version Control (Optional, but recommended)",
    "section": "4.3 Basic Git Workflow Illustration",
    "text": "4.3 Basic Git Workflow Illustration\n\n4.3.1 Create a new repository on GitHub\nWe first start with create a project repository (directory, folder) at Github. After signing into GitHub, you will see tabs like below at the left upper corner of the website.\n\n\n\n\n\n\n\n\n\n\n\nClic on Repositories and you will see this:\n\n\n\n\n\n\n\n\n\n\n\nThen, you will be directed to a page like this.\n\n\n\n\n\n\n\n\n\n\n\n\nPut your desired repository name inside the Repository name box (We call this reposiroty “RJM-Test” in this illustration)\nYou can add description in the Description box if you desire\nPick one of Public or Private (Private will be picked in this illustration)\nCheck the Add a README file (this will create README.md file automatically in your repository)\nYou can pick a default .gitignore file (R is chosen here)\nYou can pick the license type (No license specified here)\n\nOnce you input information, a new repository created and you will be directed to a page like this.\n\n\n\n\n\n\n\n\n\n\n\nYou can see that .gitignore and README.md are in this repository.\n\n\n4.3.2 Clone the repository and designate it as an RStudio Project on RStudio\nNow, open RStudio and click on the Project button (upper right corner), select New Project -&gt; Version Control -&gt; Git. Then, you will see a popup window like below:\n\n\n\n\n\n\n\n\n\n\n\nNow, go back to the repository page and click on the green Code button:\n\n\n\n\n\n\n\n\n\n\n\nYou can then click on the button with two hollow squares stacked (right to the url with your repository name in it). This copies the url.\n\n\n\n\n\n\n\n\n\n\n\nNow go back to the RStudio and paste the url to the Repository URL: box. Also specify where you want to clone (make a copy of) this repository in the Create as subdirectory of: box. Here, my Desktop was chosen.\n\n\n\n\n\n\n\n\n\n\n\nThen, click the Create Project button. The repository are now copied (cloned) to your local machine (Users/tmieno2/Desktop for me). You also should have noticed that RStudio is resfreshed and you are on the newly created project you just created with the contents inside the GitHub repository.\nAt the file tab (leftmost tab of the bottom right panel), you see that RJM-Test.Rproj file is added, indicating that this directory is recognized as an RStudio Project.\n\n\n\n\n\n\n\n\n\n\n\nLet’s go back to the original GitHub repository and see what it looks like now.\n\n\n\n\n\n\n\n\n\n\n\nWell, nothing has changed. You are not seeing the RJM-Test.Rproj file. This is because you have not submitted (uploaded) any changes in the local directory to the GitHub repository. The GitHub repository will not be automatically updated when you make changes on your local machine. This is not a Dropbox or Box syncing for a good reason.\nLet’s now add a folder called code and create simulate.R inside it. We also add test.R to that folder. Pretend that simulate.R is your main analysis code. You would like to have it archived before you make significant changes to the code. On the other hand, test.R is where you experimented things and you do not wish to put it in the archive1. Before you archive simulate.R to shelf A, you bring that to another desk (desk B). This is called staging. You can do that by checking the box left to code/ on the Git tab of the right upper pane.\n\n\n\n\n\n\n\n\n\n\n\nWell both simulate.R and test.R were staged even though we only want to archive simulate.R. You can uncheck test.R. But, let’s make Git stop keeping track of this file entirely so that we do not have to do this again. This is where .gitignore file comes in. If you look into the file, you can see something like this because I picked R-default for the initial .gitignore file when I created this repository on GitHub.\n\n\n\n\n\n\n\n\n\n\n\nThis is a list of files (or the pattern of file names using regular expression) that will be ignored by Git. To have Git ignore test.R, you can add the path to the file relative to the working direcotry, which is automatically set to the root RStudio project directory. So, add “code/test.R” like below:\n\n\n\n\n\n\n\n\n\n\n\nAfter you save this change, you should not see “code/test.R” on the Git tab any more.\n\n\n\n\n\n\n\n\n\n\n\nLet’s also check RJM-Test.Rpoj as well. We now have a collection of files. The act of putting a collection to a shelf is called committing. You can do this by hitting the Commit button. When you click on the button, you should see a screen like below:\n\n\n\n\n\n\n\n\n\n\n\nEvery time you commit, you are require do make a comment (sticky note on what you did in this collection). Make this comment informative, so that when you (or others) look back, you know what this particular commit is about.\n\n\n\n\n\n\n\n\n\n\n\nAfter putting in a comment, hit the “Commit” button in the popup window. Now, the collection is officially in the shelf (Shelf A).\nNow, we would like to put this collection in the GitHub repository (Shelf B) online so that we are sure that we have a backup that we can rely on just in case something horrible happen to your computer. Bringing the collection to shelf B is called pushing. This can be done by hitting the “Push” button. Once you push the collection, no we see it on the GitHub repository like below:\n\n\n\n\n\n\n\n\n\n\n\nNow, suppose you make further progress in your analysis in simulate.R. Specifically, you decided to use rnorm() instead of runif().\n\n\n\n\n\n\n\n\n\n\n\nYou then commited this change. But, you realized that you should not be using rnorm(). Unfortunately, you do not remember what you used before. To see the previous version of the same file, you can click on the “History” button.\n\n\n\n\n\n\n\n\n\n\n\nBy default, the most recent commit is selected and you can see below that what changes were made to what file. Here, it shows that mean(runif(N)) was changed to mean(rnorm(N)) in the last commit. If you want to recover that part of the code, then you can just copy what you had (mean(runif(N))) and paste it to the current version of code/simulate.R manually (this becomes unrealistic if you have too many changes that you need to revert.). Note that you can click on View file @ce71acb71 at the right upper coner of the box for the commited version of code/simulate.R.",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Version Control (Optional, but recommended)</span>"
    ]
  },
  {
    "objectID": "C1_3_VersionControl.html#sec-collab-vc",
    "href": "C1_3_VersionControl.html#sec-collab-vc",
    "title": "4  Version Control (Optional, but recommended)",
    "section": "4.4 Collborations",
    "text": "4.4 Collborations",
    "crumbs": [
      "Project Setup",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Version Control (Optional, but recommended)</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#prerequisites-for-engaging-with-this-chapter",
    "href": "C2_1_IntroWriting.html#prerequisites-for-engaging-with-this-chapter",
    "title": "5  Introduction",
    "section": "5.1 Prerequisites for Engaging with This Chapter",
    "text": "5.1 Prerequisites for Engaging with This Chapter\nFor a fruitful journey through this book, it is presumed that readers:\n\nUnderstand Rmarkdown Fundamentals: Familiarity with the basics of Rmarkdown is crucial. If you’re new or need a refresher, consider diving into an excellent introduction to Rmarkdown before proceeding.\nAre Versed in LaTeX for Equations: A comfort level with crafting mathematical equations using LaTeX (or a similar syntax) is essential. This skill is invaluable for presenting formulas and equations in a clear, professional manner.\nPossess Proficiency with Citation Managers: As a scholar, managing references efficiently is non-negotiable. For the scope of this book, knowledge of at least one citation manager is vital. Examples include:\n\nBibtex/Biblatex: A popular tool for creating and managing bibliographies.\nEndNote: A widely-used reference management software that integrates with Word and other word processing software.\n\n\nWith these prerequisites, you’ll be optimally poised to extract the most value from the content, discussions, and examples provided in this book.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#what-can-you-do-with-rmarkdownquarto",
    "href": "C2_1_IntroWriting.html#what-can-you-do-with-rmarkdownquarto",
    "title": "5  Introduction",
    "section": "5.2 What can you do with Rmarkdown/Quarto?",
    "text": "5.2 What can you do with Rmarkdown/Quarto?\nWithin a single Rmarkdown file, you can seamlessly integrate numerous functionalities to produce a comprehensive document. Here’s a rundown:\n\nR Code Integration:\n\nExecute R codes directly within your document to:\n\nConduct statistical analyses or modeling.\nGenerate figures, leveraging libraries like ggplot2.\nCraft tables using packages such as modelsummary and flextable.\n\n\nEmbedding R Objects:\n\nEmbed generated R objects like data sets, tables, or figures directly into the output document. This ensures your results are always up-to-date with the latest data and analyses.\n\nCross-referencing:\n\nUtilize specific syntax to cross-reference figures and tables, ensuring readers can effortlessly locate related content.\n\nCitations & References:\n\nIncorporate citations directly into your text and automatically generate a reference list.\nUtilize the Citation Style Language to format citations and the reference list according to a myriad of established academic and professional standards.\n\nEquations with LaTeX Syntax:\n\nUse LaTeX (or a similar syntax) to write intricate mathematical equations. Be mindful that the exact syntax can vary slightly depending on your output choice (PDF vs. WORD).\n\nDocument Structuring with Markdown:\n\nMarkdown syntax provides an intuitive way to structure your document. Features include:\n\nDefining various heading levels like sections, subsections, and subsubsections.\nAdding footnotes for additional context or explanations.\n\n\nComplete Formatting:\n\nIf your target is a PDF, Rmarkdown/Quarto allows you to thoroughly format the output. This means once you knit your document, there’s no additional formatting required on the output file. However, while WORD output is generally well-formatted, you might occasionally need minor adjustments due to the inherent differences between the two formats.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#why-rmarkdownquarto",
    "href": "C2_1_IntroWriting.html#why-rmarkdownquarto",
    "title": "5  Introduction",
    "section": "5.3 Why Rmarkdown/Quarto",
    "text": "5.3 Why Rmarkdown/Quarto\nRmarkdown/Quarto revolutionizes the way we handle data-driven documents by eliminating:\n\nThe drudgery of manually copying and pasting tables and figures.\nThe chore of manual formatting for tables and figures.\nThe hassle of updating data-driven numbers (like coefficient estimates or summary statistics) within the text.\n\nRewinding 16 years, during my graduate student days, Rmarkdown was yet to be born, although the sweave package was available. Being a greenhorn in academia, my workflow for generating reports for econometrics or drafting manuscripts – before mastering Latex – was incredibly tedious:\n\nExecute R codes to produce tables (be it regression results, summary stats, etc.), then screenshot these tables.\nRun R codes to craft plots in R and save them as images.\nManually import these tables and figures into a WORD document.\nManually format tables within WORD.\n\nAny alteration in the underlying data or parameters necessitated redoing this entire process from scratch. If you have ever been part of a project aiming for a published paper, you’d know that such changes aren’t rare but rather frequent.\nEnter the knitr and Rmarkdown packages, and the landscape transformed. These tools allow for a seamless blend of narratives and R code within a single document. When you knit (or compile) this file, everything required manifests in the output, be it in WORD, PDF, or HTML format.\nToday’s Rmarkdown system has matured to the point where crafting an academic manuscript in both PDF and WORD is not just feasible but efficient. While the latter (WORD) might be a tad clunkier, it’s certainly doable. This book guides you through the intricacies of this process.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#word-or-pdf",
    "href": "C2_1_IntroWriting.html#word-or-pdf",
    "title": "5  Introduction",
    "section": "5.4 WORD or PDF?",
    "text": "5.4 WORD or PDF?\nWhen writing a paper, the choice between generating a PDF or a WORD document often hinges on various factors (I really hope that journals start accepting html file).\nIf I were the sole author and the target journal accepts LaTeX files post-acceptance, I would gravitate towards producing a PDF. This is especially true if there is a readily available template to shape the output PDF in line with the journal’s specifications.\nHowever, circumstances might arise that steer you towards WORD:\n\nJournal Specifications: Numerous journals exclusively accept submissions in WORD format. Adhering to their submission guidelines is paramount.\nCollaborative Dynamics: Even if your chosen journal is open to PDF submissions, coauthors might have a preference for WORD because this format can be more accessible and familiar, allowing for easier edits and revisions.\n\nIn essence, while PDF might offer sleek formatting, especially with LaTeX, the practicalities of collaboration and specific journal requirements might necessitate a WORD document.\n\n\n\n\n\n\nAside\n\n\n\nA common scenario where opting for Word as the output file format proves beneficial is when you are writing a grant proposal. In my experience, grant proposal development typically does not involve the use of Latex (except for instances like a small grant proposal I essentially authored independently). This preference is largely due to the ease of providing feedback and collaborative editing in Word, especially when multiple collaborators are involved. If you are the PI and would not like to write in Word but find the need to generate content in Word for others, you can explore the Rmarkdown-Word option, as discussed in Chapter 6.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#sec-what-if-latex",
    "href": "C2_1_IntroWriting.html#sec-what-if-latex",
    "title": "5  Introduction",
    "section": "5.5 What if you are proficient in Latex?",
    "text": "5.5 What if you are proficient in Latex?\nThe advantage of using Rmarkdown or Quarto over LaTeX is not large if you are already proficient in LaTeX and your output file type is PDF (If it is WORD, than that is an entirely different story. See below for this discussion). LaTeX itself is capable of inserting externally created tables (written in a .tex file) and figures (in various formats). This means that you can generate a table and save it as a .tex file using R, or create a figure and save it as an image using R, which can then be imported into your LaTeX manuscript. This is a perfectly valid approach for producing a reproducible manuscript.\nWhile Rmarkdown and Quarto enable the creation of figures and tables directly within the main manuscript file using R scripts, this does not inherently make it more reproducible than creating tables and figures externally with R and importing them later. Both approaches can be equally streamlined.\nOne of the differences between the two approaches lies in the ability to reference R objects within the manuscript file. For instance, you might want to discuss your regression results by referring to a coefficient of a variable of interest. With Rmarkdown and Quarto, you can programmatically reference this coefficient, eliminating the need to manually type the number. This can be highly advantageous, especially since research results often evolve during a project. As long as you refer to the number programmatically, you will not need to manually update it whenever there are changes. Think carefully if this advantage is important enough to learn a new way of compiling a manuscript using Rmarkdown or Quarto.\nHowever, if your intended file format is Word, as required by some journals, then Rmarkdown and Quarto become immensely valuable. They allow you to compose content in a Latex-like style while generating a Word document. Unlike Latex, where programmatically inserting tables or figures into Word is challenging, Rmarkdown and Quarto resolve this limitation seamlessly. They function as pseudo-Latex in this context.\n\n\n\n\n\n\nAside\n\n\n\nMoreover, Rmarkdown and Quarto truly shine, especially when creating educational materials involving coding. Their ability to effortlessly present code and its outcomes is of exceptional value. However, in cases like ours, where the manuscript does not include code display, this particular advantage may not be as relevant.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_1_IntroWriting.html#sec-markdown-basics",
    "href": "C2_1_IntroWriting.html#sec-markdown-basics",
    "title": "5  Introduction",
    "section": "5.6 Markdown Basics",
    "text": "5.6 Markdown Basics\nThis section introduces certain markdown syntaxes that will be particularly useful, or even necessary, when using the Rmarkdown and Quarto systems to create submission-ready journal manuscripts. A more comprehensive guide to markdown syntax can be found here. This chapter intentionally omits syntaxes that are more suited for HTML output.\n\n5.6.1 Section, subsection, subsubsections, …\nYou can define sections, subsections, and subsubsections by using #, ##, and ### respectively at the beginning of a line.\n\n# This becomes section title\n\n## This becomes subsection title\n\n### This becomes subsubsection title\n\n\n\n\n5.6.2 List\nYou can create an unordered list by simply using either +, -, or * in front of each item. For example,\n+ item 1\n+ item 2\n+ item 3\nwould print as below in the output file.\n\nitem 1\nitem 2\nitem 3\n\nYou can create a nested list like below\n+ item 1\n  - item 1.1\n  - item 1.2\n+ item 2\n+ item 3\nwould print as below in the output file.\n\nitem 1\n\nitem 1.1\nitem 1.2\n\nitem 2\nitem 3\n\nHere is an ordered list.\n1. item 1\n2. item 2\n3. item 3\n\nitem 1\nitem 2\nitem 3\n\n\n\n5.6.3 Emphasis\n\nbold font: **this becomes bold** (or __this becomes bold__)\nitalic font: *this becomes italic*\n\n\n\n\n5.6.4 Footnote\nYou can add a footnote using ^[] like this:\n\nregular texts^[this is a footnote]\n\nFootnotes are automatically numbered.\n\n\n\n5.6.5 Tables\nYou can create a table like below.\n| Header 1 | Header 2 |\n| -------- | -------- |\n| Cell 1A  | Cell 1B  |\n| Cell 2A  | Cell 2B  |\nCreating tables using markdown syntax is generally not recommended. Unless the table is simple and unlikely to change in the future, it’s recommended to use R packages for table creation whenever possible.\n\n\n5.6.6 Escape Characters\nIf you want to display a literal character that usually has a special meaning in Markdown, you can escape it with a backslash (\\):\n\\* This is not italicized. \\*",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#before-you-start",
    "href": "C2_2_Rmarkdown_WORD.html#before-you-start",
    "title": "6  Rmarkdown-WORD",
    "section": "6.1 Before you start",
    "text": "6.1 Before you start\n\n\n\n\n\n\nWhat you need to know/learn\n\n\n\nTo author a full journal article without using WORD, you’ll need to acquire or have familiarity with the following skills:\n\nHow Rmarkdown works (This or This is a good place to start)\nHow to write mathematical expressions using Latex(-like) syntax (This can be a good start)\nCreate figures using R (any R package, like ggplot2)\nCreate tables using R with select R packages that are compatible with WORD output (e.g., flextable, modelsummary, gtsummary)\n\n\n\nBefore delving into this chapter, carefully consider the time and effort required to master these skills. Ensure the investment aligns with your goals and priorities.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#preparation",
    "href": "C2_2_Rmarkdown_WORD.html#preparation",
    "title": "6  Rmarkdown-WORD",
    "section": "6.2 Preparation",
    "text": "6.2 Preparation\nBefore diving in, please do the followings:\n\nGo here and download all the files including sample_to_word.rmd, which we refer to as the sample rmd file throughout this chapter.\nAlternatively, you can clone this Github repository and go to the Resources/WORD-Rmarkdown/ folder.\nOpen RStudio (or any other software you you may be using like VS code) and knit sample_to_word.rmd to produce sample_to_word.docx, which we refer to as the sample WORD file.\nInstall the following packages if you have not\n\nofficedown\nflextable\nofficer\nknitr\nRmarkdown\ntidyverse\nmodelsummary",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#basic-workflow-until-publication",
    "href": "C2_2_Rmarkdown_WORD.html#basic-workflow-until-publication",
    "title": "6  Rmarkdown-WORD",
    "section": "6.3 Basic workflow until publication",
    "text": "6.3 Basic workflow until publication\nHere are the proposed steps to generate a fully publication-ready article:\n\nWrite an Rmarkdown file and knit to a WORD file without worrying about formatting your manuscript (Most journals do not require manuscript formatting until the manuscript is accepted. But, please do check yourself if it is required)\nIterate between the authors until ready for submission\nSubmit your manuscript (no formatting just yet)\nRevise and resubmit your manuscript after iterating between the authors (the same as step 2)\nRepeat steps 2, 3, and 4 until accepted (terminate the process if rejected)\nFinally, format your manuscript to the specific requirements by the journal\n\ncreate a style reference WORD file and refer to it (see Section Section 6.6).\nmodify the format manually on WORD if that is faster\n\n\nNow, let’s take a closer look at Step 2. What you do in this step differs based on who your co-authors are.\n\n\n\n\n\n\nCase 1: one of your co-authors demands a WORD file for editing for him/herself\n\n\n\n\nIn this scenario, you start by converting your text to a WORD file and sharing it with the authors. They can then edit the document in WORD. Afterward, you need to apply the suggested changes from the WORD file back to the Rmarkdown file. This final step is necessary because you are not exclusively writing in WORD. Although it may seem like an additional task, I personally do not find it burdensome. On the contrary, it ensures that I thoroughly review all modifications made by co-authors, which is essential regardless of the software used.\nOnce you modify the Rmarkdown file and knit to WORD, all the track changes will be lost. For the co-authors who want to see the changes you made from the previous version, simply suggest taking advantage of WORD’s capability to compare two versions of a document (see here). If they complain about doing this, just stop working with them entirely.\n\n\n\n\n\n\n\n\n\nCase 2: every single one of the authors knows how to use Rmarkdown and git\n\n\n\nIn this case, things are just so much easier. You never have to get out of Rmarkdown. Just let them edit the Rmarkdown file and keep track of changes using git. Any IDE should give you a side-by-side comparison of the previous and current versions like below (Sublime Merge is used here).",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#structure-of-the-rmarkdown-file",
    "href": "C2_2_Rmarkdown_WORD.html#structure-of-the-rmarkdown-file",
    "title": "6  Rmarkdown-WORD",
    "section": "6.4 Structure of the Rmarkdown file",
    "text": "6.4 Structure of the Rmarkdown file\nAn Ramrkdown file consists mainly of two components.\n\nYAML header\nMain body\n\n\n6.4.1 YAML header\nYAML header comes at the very top of the Rmarkdown file and it lets you specify things like\n\npaper title\nauthors (with affiliations and other subsidiary information)\ndate\nabstract\n\nIt also lets you specify various aspects of the output word file including\n\nwhether to include table of contents (toc)\nthe depth of table of contents (toc_depth)\nwhether to number sections or not (number_sections)\nhow to display plots and tables (plots, tables)\n\nalignment (align)\nprefix (pre), etc\n\n\nThis is also where you specify what files you use as bibliography, citation style, among other things. Important ones will be introduced later.\nHere is an example YAML header, which you can see in sample_to_word.rmd file.\n\n\n\n\n\n\n\n\n\n\n\nMore detailed explanation of output options will be provided later individually when the relevant topics are discussed.\n\n\n6.4.2 Main body\nThis is everything that is below the YAML header, where narratives and R codes are written.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#essential-markdown-syntaxes-for-word",
    "href": "C2_2_Rmarkdown_WORD.html#essential-markdown-syntaxes-for-word",
    "title": "6  Rmarkdown-WORD",
    "section": "6.5 Essential markdown syntaxes for WORD",
    "text": "6.5 Essential markdown syntaxes for WORD\nHere are the essential markdown syntaxes you should know. For other syntaxes such as creating a list, please refer to section Section 5.6.\nSection, subsection, subsubsections, …\nYou can define sections, subsections, and subsubsections by using #, ##, and ### respectively at the beginning of a line.\n# This becomes section title\n\n## This becomes subsection title\n\n### This becomes subsubsection title\n\n\n\n\n\n\nNote\n\n\n\n\nConfirm that # Materials and Methods and ## Data in sample_to_word.rmd turn into a section and subsection title in sample_to_word.docx.\nNote also that the sections and subsections are automatically numbered because number_sections: true in the YAML header.\n\n\n\nFootnote\nYou can add a footnote using ^[] like this:\nregular texts^[this is a footnote]\nFootnotes are automatically numbered.\n\n\n\n\n\n\nNote\n\n\n\nSee the Conclusion section of sample_to_word.rmd and sample_to_word.docx.\n\n\n\nPage break\nFor introducing a page break, you can place the following R chunk.\n`r run_pagebreak()`\n\n\n\n\n\n\nNote\n\n\n\nTo see this in action, examine the end of the Introduction section in the sample Rmarkdown and corresponding WORD files.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#sec-word-specify-style",
    "href": "C2_2_Rmarkdown_WORD.html#sec-word-specify-style",
    "title": "6  Rmarkdown-WORD",
    "section": "6.6 Specifying the style",
    "text": "6.6 Specifying the style\nYou can change the style of the output WORD file either via direct control in the YAML header or via reference WORD file.\n\n\n\n\n\n\nTip\n\n\n\n\nYou first change styles directly using the options made available by the officedown package in the YAML header Section 6.6.1\nIf the above is not sufficient, use reference WORD file to apply its style (not content) to the output WORD file Section 6.6.2\n\n\n\n\n6.6.1 Change styles in the YAML header\nYou can control the style of the output WORD file somewhat in the YAML header. For example, you can determine the page size and margins using page_size and page_margins (see the YAML header in the sample rmd file). You also have some controls on how tables and figures appear. For example, the align option lets you determine the horizontal position of tables and figures. topcaption lets you determine whether you have the caption at the top of bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor the complete set of options, see Section 4 of the Officeverse book.\n\n\n\n\n6.6.2 Change styles through reference docx\nIt is almost always the case that the above approach is not sufficient to format your WORD file to the specific requirements of your target journal. In such a case, you can define the style of the output WORD file in detail using a style reference WORD file. This method can control virtually every aspect of WORD file styling. Some of the commonly customized elements among others are\n\nfont size\nfont family\nline spacing\n\nTo do this, you first create a style reference word file that follows the style and format you would like the output WORD file to have. Then, add the following to the YAML header under output: like below.\n\noutput:\n  reference_docx: word-style.docx\n\nIn our example project, word_template.docx is the reference file.\n\n\n\n\n\n\n\n\n\n\n\nOf course, only the style and format of the reference WORD file will be inherited to the output WORD file, but not its contents.\n\n\n\n\n\n\nNote\n\n\n\n\nCompared the style of sample_to_word.docx and “word_template.docx” and confirm they have the same font size and family for the narrative, sections, subsections, and subsubsection.\nUncomment reference_docx: word_template.docx in the YAML header, knit to a WORD file, and check the style of sample_to_word.dcox again\n\n\n\nYou can change the style of the reference WORD style file and save the changes. Then, the style changes will be reflected in the output WORD file when the rmd file is knitted next time.\n\n\n\n\n\n\nTip\n\n\n\nTo create a style file for your liking you may find this Microsoft tutorial and this book chapter in (xie2020r?) useful.\n\n\n\n\n6.6.3 Style change example\nThis section gives you a quick look at what it may look to be changing the style of a reference WORD file. We use word_template.docx for this demonstration. First, open the document on WORD and open the Styles Pane (If you are using Mac, it should be at the right upper corner of the document). Then you should see something like below.\n\n\n\n\n\n\n\n\n\n\n\nThen, put your cursor on anywhere in line 2 as below and you should see that the current style is changed to “1 Heading 1”, which is the name of the class (style type) the texts in line 2 belong to.\n\n\n\n\n\n\n\n\n\n\n\nNow, put your cursor at the black triangle and you should see available options including “Modify Style…”\n\n\n\n\n\n\n\n\n\n\n\nOnce you click on it, you should see a pop-up window like below.\n\n\n\n\n\n\n\n\n\n\n\nHere, you can change font family, font size, among other things. In this demonstration, let’s get rid of automatic section number. To do so, click on the “Format” button at the lower left corner of the window. Then, you should see this.\n\n\n\n\n\n\n\n\n\n\n\nPick “Numbering,” click on “None,” and hit “OK.”\n\n\n\n\n\n\n\n\n\n\n\nHit “OK” again in the previous pop-up window, then you should see this.\n\n\n\n\n\n\n\n\n\n\n\nNotice that section numbering is now gone. Now, knit the sample rmd file and confirm that the output WORD file indeed lost section numbers (subsection numbers still remain because you did not modify that part in the reference docx.).",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#citations-and-references",
    "href": "C2_2_Rmarkdown_WORD.html#citations-and-references",
    "title": "6  Rmarkdown-WORD",
    "section": "6.7 Citations and References",
    "text": "6.7 Citations and References\n\n6.7.1 Set up\nFirst, create a reference file. Then, add the following to the YAML header (not under output:).\n\nbibliography: bibliography file name\n\nThere are various bibliography systems that can be used including BibLaTeX/BibTex (.bib), CSL-JSON (.json), EndNote (.enl) among other.\n\nThen, add the following to the part of rmd where you want to put references.\n::: {#refs}\n:::\nIn our example, we use a bib file and the bibliography file is named bibliography.bib and specified in the YAML header as below\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSee the sample rmd file to see how bibliography file is specified in the YAML header\nConfirm that {#refs} enclosed by :::is placed in the Reference section of the sample rmd file and confirm that references are indeed added in the Reference section of the output word file\n\n\n\n\n\n\n6.7.2 Cite and create references\nTo cite, use the following syntax:\n\n@reference_name to print “author names (year)” in the output WORD file\n[@reference_name] to print “(author names, year)” in the output WORD file\n[@reference_name_1; @reference_name_2] to print “(author names, year; author names, year)” in the output WORD file\n[-@reference_name] to print just year\n\nreference_name is the very first entry of a .bib file as in\n\n\n\n\n\n\n\n\n\n\n\nIf you are using CSL json file, then it is the id of an entry as in\n\n\n\n\n\n\n\n\n\n\n\nThe cited items are automatically added to the reference following the specified style (see the next section).\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Introduction and Reference sections in the sample rmd and WORD files to confirm this rule.\nComment out bibliography: bibliography.bib and uncomment bibliography: bibliography.json, knit again, and check citations and references are still there. This is just an illustration of using a different bibliography file (CSL-json file).\n\n\n\n\n\n\n6.7.3 Citation and Reference Style\nYou can change the citation and reference style using Citation Style Language. Citation style files have .csl extension.\n\nObtain the csl file you would like to use from the Zotero citation style repository.\nPlace the following in the YAML header (not under output:):\n\n\ncsl: csl file name \n\n\nThen, when knitted, citations and references styles reflect the style specified by the csl file\n\nCurrently, the csl style should be set to qje.csl (citation style language for The Quarterly Journal of Economics) as below\n\n\n\n\n\n\n\n\n\n\n\nCitation and references styles in the output WORD file follows the rules for the QJE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for QJE\n\n\n\n\n\n\n\nReference style for QJE\n\n\n\n\n\n\n\nNow, comment csl: qje.csl and uncomment csl: pnas.csl so that the CSL for the Proceedings of the National Academy of Sciences (PNAS) is used, and then knit the sample rmd file.\nYou can now see that the citation style no longer respects the rules I mentioned above and also the reference style follows that of PNAS. This is because PNAS uses only numbers, but not author names or years.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for PNAS\n\n\n\n\n\n\n\nReference style for PNAS",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#cross-ref-table-word",
    "href": "C2_2_Rmarkdown_WORD.html#cross-ref-table-word",
    "title": "6  Rmarkdown-WORD",
    "section": "6.8 Tables (Cross-referenced)",
    "text": "6.8 Tables (Cross-referenced)\n\nCreate a table using the flextable package (this is not the only option, and will be discussed later)\nAdd an R code chunk like this:\n\n```{r, tab.id = \"table-id\", tab.cap = \"table-name\"}\ntable_ft\n```\n\ntable_ft is a flextable object.\ntable-name is the caption of the table in the output WORD file\ntable-id is the table id you can use to cross-reference\n\n\nUse \\@ref(tab:table-id) in the Rmarkdown file to cross-reference the table (table numbering in the output WORD file is automatic)\n\n\n\n\n\n\n\nImportant\n\n\n\nYou cannot use _ in the table id (- is allowed). Cross-referencing would not work if the table id includes _.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Tables section of the sample rmd for the R codes to create a table using the flextable package and confirm that the table appears in the output WORD files\nSee the bottom of the Data subsection under the Materials and Methods section to confirm that cross-referencing is working.\n\n\n\n\n6.8.1 Packages to create tables\nOne of the disadvantages of writing to a WORD file is that some table-making R packages are not compatible with it. The flextable package is written by the same author of the officedown package, which we are using to write to a WORD file. So, naturally, a table object created by the flextable package (a flextable object) can be knitted into the output WORD without (almost) any hiccups as we saw earlier. A notable R package that does NOT work well with the output class of officedown::rdocx_document (which we are using) is the gt package. Tables created by the package is an object of class gt. Unfortunately, there is no function that lets you convert an gt object to a flextable object as of now.\nOne of the recommended packages is the modelsummary package (especially for those who often include regression results tables and summary statistics tables). It lets you create regression results tables via the modelsummary() function and summary statistics tables via the datasummary() function1. Both functions has an option called output and you can use output = \"flextable\" to generate tables as flextable objects, which can then be included in the output file easily.\nHere are some example R codes of using the modelsummary package to create a regression results and summary statistics tables.\nRegression table\n\n#--- regressions ---#\nlm_1 &lt;- fixest::feols(mpg ~ hp + cyl, data = mtcars)\nlm_2 &lt;- fixest::feols(mpg ~ hp + cyl + wt, data = mtcars)\nlm_3 &lt;- fixest::feols(mpg ~ hp + cyl + wt, cluster = ~ vs, data = mtcars)\n\n#--- create a regression results table ---#\nmodelsummary::modelsummary(\n  list(lm_1, lm_2, lm_3),\n  output = \"flextable\",\n  gof_omit = \"IC|Log|Adj|F|Pseudo|Within\"\n) %&gt;%\n  autofit() %&gt;%\n  hline(8) # add horizontal line. modelsummary() adds horizontal line separating coefficient estimates and model summary statistics. But, it disappears on WORD for some reason. So, it is manually added here.\n\nSummary statistics table\n\nmodelsummary::datasummary(\n  mpg + hp + cyl ~ Mean + SD,\n  data = mtcars,\n  output = \"flextable\"\n)\n\nHere is one of the resources to learn how to use the flextable package if you need to further modify the tables created by the modelsummary() and datasummary() functions.\n\n\n\n\n\n\nNote\n\n\n\nSee how the exactly the same codes above in the sample rmd file translates into the regression results and summary statistics tables in the output word file.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#figures-cross-referenced",
    "href": "C2_2_Rmarkdown_WORD.html#figures-cross-referenced",
    "title": "6  Rmarkdown-WORD",
    "section": "6.9 Figures (Cross-referenced)",
    "text": "6.9 Figures (Cross-referenced)\n\n6.9.1 Figures created internally\nYou can create plots within an Rmarkdown file and display them in the output WORD file. Here are the steps.\n\nCreate a plot using R\nAdd an R code chunk like this:\n\n\nfigure_g is a plot.\nfig.cap = \"caption\" adds caption as the caption of the figure\nfigure-id is the figure id used for cross-referencing\n\n```{r, fig.id = \"figure-id\", fig.cap = \"caption\"}\nfigure_g \n```\n\nUse \\@ref(fig:figure-id) in the Rmarkdown file to cross-reference the figure (figure numbering in the output WORD file is automatic)\n\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nPlease do not forget to have fig.cap = \"caption\" in the R code chunk option that output a plot. Otherwise, the plot will not be recognized as a plot in the output WORD file and cross-referencing will not work even though the plot will be displayed (check to confirm this by removing fig.cap = \"The Distribution of Yield by Zone\" from the R code chunk in the Figures section of the sample WORD file).\nYou cannot use _ in the figure id (- is allowed). Cross-referencing would not work if the table id includes _.\n\n\n\nYou can control the size of the plots in the output WORD file, using the fig.width and fig.height options in the R code chunk. For example, fig.width = 4 would mean that the width of the plot will be 4 inches. Use the dpi option to control the resolution of the plot. The higher the dpi value, the sharper the plot is.\n\n\n\n\n\n\nTry\n\n\n\n\nChange fig.width to 2 and see what happens to the output WORD file.\nRemove the fig.cap option and see what happens to the output WORD file.\nChange the dpi value to 100 see what happens to the output WORD file.\n\n\n\n\n\n6.9.2 Importing pre-made figures\nInstead of creating plots using R code inside an Rmarkdown, we often need to import figures that were made elsewhere. You may be importing your company/university logos. You may have created plots using the ggplot2 package and saved them as pictures. In order to import a pre-made figure and cross-reference it, you can use knitr::include_graphics() as follows,\n```{r  echo = F, fig.id = \"figure-id\", fig.cap = \"figure caption\"}\nknitr::include_graphics(\"file name\")\n```\nYou can cross-reference imported figures in the same manner as the R-generated figures as shown above.\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\nIt is important to note that pdf files are not accepted2. One of the accepted files types is .png (or jpg)3. So, if you are creating figures outside of the Rmarkdown file, save it as a png file.\nIn order to change the size of the imported figure, you can use the same R chunk option of fig.width and fig.height as the internally created plots. However, you cannot control the resolution of the imported figure using dpi (naturally) because the resolution of the saved image will be respected. If you are using R to create a plot, you can set its dpi when saving it. For example, if you are using ggplot2, you can the dpi option in ggsave() will do the job.\n\n\n\n\n\n\nTry!\n\n\n\n\nChange fig.width = 3 to see its effect on the output WORD file\nChange dpi = 600 in the R code chunk for the second figure to confirm that it does not anything",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_2_Rmarkdown_WORD.html#mathematical-equations",
    "href": "C2_2_Rmarkdown_WORD.html#mathematical-equations",
    "title": "6  Rmarkdown-WORD",
    "section": "6.10 Mathematical equations",
    "text": "6.10 Mathematical equations\nYou can use Latex-like math syntax to write mathematical equations. For equation numbering and cross-referencing to work as discussed here, make sure that you use bookdown::word_document2 for the base_format in the YAML header as below.\n\n\n\n\n\n\n\n\n\n\n\n\n6.10.1 Math equation\nMath for WORD output is much more limited compared to writing to a PDF file using Latex (when knitting to a PDF file, Rmarkdown uses Latex to render math equations). This is because Latex is NOT involved in converting Latex-like math syntax to math equations when knitted to WORD. Instead, pandoc is doing the conversion job. So, it is not surprising that not all the Latex math capabilities can be utilized when knitting to a WORD file. With that said, most of the syntaxes that you will need are the same between Rmd-to-WORD and Latex. You can use the equation (for single line of math) and align (more than equal to one equations) environments with successful cross-referencing.\n\nequation environment\nTo use an equation environment, first write math and then put (\\#eq:equation-id) at the end (but before \\end{equation}) to give an equation id to the equation. You can use \\@ref(eq:equation-id) to cross-reference the equation.\n\\begin{equation}\nMath\n(\\#eq:equation-id)\n\\end{equation}\nFor example,\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n(\\#eq:eq-1)\n\\end{equation}\nshould print like below in the output WORD file.\n\\[\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n\\end{equation}\n\\]\n\nalign environment\nThis works just like equation environment. To use an align environment, first write line(s) of math and then put (\\#eq:equation-id) at the end (but before \\end{align}) to give an equation id to the equation. You can use \\@ref(eq:equation-id) to cross-reference the equation.\n\\begin{align}\nMath\\\\ \nMath\n(\\#eq:equation-id)\n\\end{align}\nFor example,\n\\begin{align}\n AR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\n Y_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\nshould print like below in the output WORD file.\n\\[\n\\begin{align}\nAR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\nY_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\n\\]\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\n\n6.10.2 In-line math\nTo write a mathematical expression in line, you can enclose math expressions by $ like below.\nOur model is written as $Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z$.\nThis should appear like below in the output WORD file.\nOur model is written as \\(Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\).\n\n\n\n\n\n\nRmarkdown-WORD Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nWORD",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Rmarkdown-WORD</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#before-you-start",
    "href": "C2_3_Rmarkdown_PDF.html#before-you-start",
    "title": "7  Rmarkdown-PDF",
    "section": "7.1 Before you start",
    "text": "7.1 Before you start\nTo author a full journal article in PDF using Rmarkdown, you will need to acquire or have familiarity with the following skills:\n\n\n\n\n\n\nImportant\n\n\n\n\nBasic knowledge of how Rmarkdown works (This or This is a good place to start)\nCreate figures using R (any R package, like ggplot2)\nCreate tables using R with select R packages that are compatible with Latex-PDF output (e.g., huxtable, kableExtra, modelsummary, gtsummary)\nFamiliarity with basic debugging of Latex codes (highly preferable).\n\n\n\nBefore delving into this chapter, carefully consider the time and effort required to master these skills. Ensure the investment aligns with your goals and priorities.\nWhile you can generate a PDF article without LaTeX expertise, it’s strongly advised to familiarize yourself with LaTeX debugging. This not only aids in customizing the article format but also prepares you for potential compilation errors you might face.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#preparation",
    "href": "C2_3_Rmarkdown_PDF.html#preparation",
    "title": "7  Rmarkdown-PDF",
    "section": "7.2 Preparation",
    "text": "7.2 Preparation\nBefore diving in, please do the followings:\n\nGo here and download all the files including sample_to_pdf.rmd, which we refer to as the sample rmd file throughout this chapter. Alternatively, you can clone this Github repository.\nKnit sample_to_pdf.rmd to produce sample_to_pdf.pdf, which we refer to as the sample PDF file.\nInstall the following packages if you have not\n\nknitr\nRmarkdown\ntidyverse\nmodelsummary\ngtsummary\nhuxtable\nkableExtra",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#yaml-header",
    "href": "C2_3_Rmarkdown_PDF.html#yaml-header",
    "title": "7  Rmarkdown-PDF",
    "section": "7.3 YAML header",
    "text": "7.3 YAML header\nAn Rmarkdown file starts with a YAML header, which lets you specify things like\n\npaper title\nauthors (with affiliations and other subsidiary information)\ndate\nabstract\n\nIt also lets you specify various aspects of the output PDF file including\n\nwhether to include table of contents (toc)\nthe depth of table of contents (toc_depth)\nwhether to number sections or not (number_sections)\nhow to display plots\n\nsize\nalignment\n\n\nThis is also where you specify what files you use as bibliography, citation style, among other things. Important ones will be introduced later.\nHere is an example YAML header, which you can see in sample_to_pdf.rmd file.\n\n\n\n\n\n\n\n\n\n\n\nFull list of options can be found here. More detailed explanation of some of the output options will be provided later individually when the relevant topics are discussed.\nNote that we are using bookdown::pdf_document2 from the bookdown package instead of using pdf_document from the Rmarkdown package. The use of bookdown::pdf_document2 enables cross-referencing of tables.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#using-existing-journal-templates",
    "href": "C2_3_Rmarkdown_PDF.html#using-existing-journal-templates",
    "title": "7  Rmarkdown-PDF",
    "section": "7.4 Using existing journal templates",
    "text": "7.4 Using existing journal templates\nBefore anything, you should first check if the collection of templates provided by the rticles package has the template for your target journal.\nHere are the currently available templates offered by the package (You can also see a more informative version of the list on the package GitHub site.).\n\nrticles::journals()\n\n [1] \"acm\"            \"acs\"            \"aea\"            \"agu\"           \n [5] \"ajs\"            \"amq\"            \"ams\"            \"arxiv\"         \n [9] \"asa\"            \"bioinformatics\" \"biometrics\"     \"copernicus\"    \n[13] \"ctex\"           \"elsevier\"       \"frontiers\"      \"glossa\"        \n[17] \"ieee\"           \"ims\"            \"informs\"        \"iop\"           \n[21] \"isba\"           \"jasa\"           \"jedm\"           \"joss\"          \n[25] \"jss\"            \"lipics\"         \"lncs\"           \"mdpi\"          \n[29] \"mnras\"          \"oup_v0\"         \"oup_v1\"         \"peerj\"         \n[33] \"pihph\"          \"plos\"           \"pnas\"           \"rjournal\"      \n[37] \"rsos\"           \"rss\"            \"sage\"           \"sim\"           \n[41] \"springer\"       \"tf\"             \"trb\"            \"wellcomeor\"    \n\n\nTo start a template, click on the button with green plus on a white sheet of paper at the left upper corner of the RStudio IDE and select R Markdown as shown below:\n\n\n\n\n\n\n\n\n\n\n\nYou can then select From Template, pick the template you would like to use, give the new directory a name, and hit OK.\n\n\n\n\n\n\n\n\n\n\n\nYou will see a folder and a .Rproj. In the folder, you will find a template Rmarkdown file and other assets that are necessary for compiling the Rmarkdown file into the journal format.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#problems",
    "href": "C2_3_Rmarkdown_PDF.html#problems",
    "title": "7  Rmarkdown-PDF",
    "section": "7.5 Problems",
    "text": "7.5 Problems\nhttps://stackoverflow.com/questions/77290665/did-i-break-r-markdown-every-file-i-try-gives-the-error-undefined-control-se",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#citations-and-references",
    "href": "C2_3_Rmarkdown_PDF.html#citations-and-references",
    "title": "7  Rmarkdown-PDF",
    "section": "7.6 Citations and References",
    "text": "7.6 Citations and References\n\n7.6.1 Set up\nBegin by preparing a file that contains all your references. In your document’s YAML header, specify the bibliography file:\n\nbibliography: bibliography file name\n\nThere are multiple formats and systems available for bibliographies, such as BibLaTeX/BibTex (.bib), CSL-JSON (.json), and EndNote (.enl). among others.\nIn this illustration, we are employing a .bib file. If our bibliography file is titled bibliography.bib, the YAML header would look like:\n\n\n\n\n\n\n\n\n\n\n\nWhen knitting to PDF, the references will be positioned at the conclusion of the document, as documented (see here). Append # References {-} to the tail end of your .qmd file. This creates a “References” section heading where all the citations will be listed. Including {-} adjacent to the section header ensures the References section remains unnumbered. This is particularly useful if you have activated section numbering in the YAML header with number-sections: true. Without {-}, the “References” section would be automatically numbered, which is often not desired in academic and professional documents.\n\n\n\n\n\n\nNote\n\n\n\n\nSee the sample qmd file to see how bibliography file is specified in the YAML header\nConfirm that the Reference section of the sample qmd and PDF files\n\n\n\n\n\n\n7.6.2 Cite and create references\nTo cite, use the following syntax:\n\n@reference_name to print “author names (year)” in the output WORD file\n[@reference_name] to print “(author names, year)” in the output WORD file\n[@reference_name_1; @reference_name_2] to print “(author names, year; author names, year)” in the output WORD file\n[-@reference_name] to print just year\n\nreference_name is the very first entry of a .bib file as in\n\n\n\n\n\n\n\n\n\n\n\nIf you are using CSL json file, then it is the id of an entry as in\n\n\n\n\n\n\n\n\n\n\n\nThe cited items are automatically added to the reference following the specified style (see the next section).\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Introduction and Reference sections in the sample qmd and PDF files to confirm this rule.\nComment out bibliography: bibliography.bib and uncomment bibliography: bibliography.json, knit again, and check citations and references are still there. This is just an illustration of using a different bibliography file (CSL-json file).\n\n\n\n\n\n\n7.6.3 Citation and Reference Style\nYou can change the citation and reference style using Citation Style Language. Citation style files have .csl extension.\n\nObtain the csl file you would like to use from the Zotero citation style repository.\nPlace the following in the YAML header:\n\n\ncsl: csl file name \n\n\nThen, when knitted, citations and references styles reflect the style specified by the csl file\n\nCurrently, the csl style is set to qje.csl (citation style language for The Quarterly Journal of Economics) as below\n\n\n\n\n\n\n\n\n\n\n\nCitation and references styles in the output PDF file follows the rules for the QJE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for QJE\n\n\n\n\n\n\n\nReference style for QJE\n\n\n\n\n\n\n\nNow, comment csl: qje.csl and uncomment csl: pnas.csl so that the CSL for the Proceedings of the National Academy of Sciences (PNAS) is used, and then knit the sample qmd file.\nYou can now see that the citation style no longer respects the rules I mentioned above and also the reference style follows that of PNAS. This is because PNAS uses only numbers, but not author names or years.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for PNAS\n\n\n\n\n\n\n\nReference style for PNAS",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#tables-cross-referenced",
    "href": "C2_3_Rmarkdown_PDF.html#tables-cross-referenced",
    "title": "7  Rmarkdown-PDF",
    "section": "7.7 Tables (Cross-referenced)",
    "text": "7.7 Tables (Cross-referenced)\n\nCreate a table using any R package that can produce latex tables.\nAdd an R code chunk like this:\n\n```{r tbl-id}\ntable_sample\n```\n\ntable_sample is the name of the table created on R.\ntbl-id is the R chunk label you can use to cross-reference the table\n\n\nUse \\@ref(tab:tbl-id) in the Rmarkdown file to cross-reference the table (table numbering in the output PDF file is automatic).\n\n\n\n\n\n\n\nCaveat!!\n\n\n\n\nYou cannot add a title using tab.cap unlike adding a title to a figure using fig.cap. So, add a table title when you create it using R.\nThe R chunk label cannot include _ (- is allowed). Cross-referencing would not work if label includes _.\n\n\n\n\n\n\n\n\n\nCross-referencing tables with an rticles template\n\n\n\nTo cross-reference tables using the Rmarkdown method described above, replace the following YAML header in your rtricles template:\noutput:\n  rticles::your_template\nwith\noutput:\n  bookdown::pdf_book:\n    base_format: rticles::your_template\nin the YAML header.\nThis adjustment enables you to cross-reference tables in the desired Rmarkdown format. However, please note that you can still cross-reference tables using the traditional Latex method without making this change.\n\n\n\n7.7.1 Packages to create tables\n\n\n7.7.1.1 Simple table from a data.frame\nThere are many R packages that let you create tables that are compatible with Latex. For example, you can use the kableExtra and huxtable package to create tables from a data.frame-like R objects from scratch. Here is an example code using the huxtable package.\n\nlibrary(huxtable)\n\nhead(iris, 10) %&gt;%\n# Create a huxtable\nas_hux() %&gt;%\n# Add some basic styling\nset_background_color(row = 1, value = \"lightgray\") %&gt;% # Background color for header\nset_caption(\"This is how you add the caption\")\n\nThe gt package does not work as well with Latex as it does with the html output1. In academic journals, fancy looking tables are not necessary. kableExtra and huxtable are likely to be very much sufficient.\n\n\n\n7.7.1.2 Regressions results and summary tables\nFor regression results and summary statics, the modelsummary and gtsummary2 packages are particularly convenient and useful. For example, the modelsummary package lets you create regression results and summary statistics tables via the modelsummary() function and summary statistics tables via the datasummary() function3. For the gtsummary package, their respective corresponding functions are tbl_regression and tbl_summary. For regression results tables, the stargazer package is also a viable option. It is less capable in creating summary statistics tables than modelsummary and gtsummary.\nHere are example R codes that use the modelsummary package to create regression results and summary statistics tables.\nRegression table\n\n#--- regressions ---#\nlm_1 &lt;- fixest::feols(mpg ~ hp + cyl, data = mtcars)\nlm_2 &lt;- fixest::feols(mpg ~ hp + cyl + wt, data = mtcars)\nlm_3 &lt;- fixest::feols(mpg ~ hp + cyl + wt, cluster = ~ vs, data = mtcars)\n\n#--- create a regression results table ---#\nlibrary(modelsummary)\n\nmodelsummary(\n  list(lm_1, lm_2, lm_3),\n  gof_omit = \"IC|Log|Adj|F|Pseudo|Within\",\n  #--- add the title (caption) here ---#\n  title = \"Reression Results\"\n)\n\nThis is how the table would appear on the output PDF file.\n\n\n\n\n\n\n\n\n\n\n\nSummary statistics table\n\ndatasummary(\n  mpg + hp + cyl ~ Mean + SD,\n  data = mtcars,\n  #--- add the title (caption) here ---#\n  title = \"Summary Statistics\"\n)\n\nThis is how the table would appear on the output PDF file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.7.1.3 Further modifying regression and summary statistics tables\nYou can modify (fine-tune) the output of modelsummary or gtsummary using the huxtable package if you are not satisfied. For the modelsummary package, this can be done by using output = \"huxtable\" and then use huxtable functions for modifications. Here is an example code.\n\nmodelsummary(list(lm_1, lm_2, lm_3),\n output = \"huxtable\",\n gof_omit = \"IC|Log|Adj|F|Pseudo|Within\",\n title = \"Regression Results\",\n stars = TRUE\n) %&gt;%\n# Bold the header row\n# set_bold(row = 1) %&gt;%\n# Border at the bottom of the table\nset_bottom_border(row = nrow(.), value = 0.4) %&gt;%\n# Center-align the header\nset_align(1, everywhere, value = \"center\") %&gt;%\n# Set font size to 10\nset_font_size(value = 10) \n\nFor the gtsummary package, you can apply as_hux_table() and then modify the table.\nHere is an example code for using the kableExtra package.\n\nmodelsummary(list(lm_1, lm_2, lm_3),\n  output = \"kableExtra\",\n  gof_omit = \"IC|Log|Adj|F|Pseudo|Within\",\n  title = \"Regression Results\",\n  stars = TRUE\n) %&gt;%\n  kableExtra::add_header_above(\n    c(\" \" = 1, \"Model (se not clustered) \" = 2, \"Model (se clustered)\" = 1)\n  )",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#figures-cross-referenced",
    "href": "C2_3_Rmarkdown_PDF.html#figures-cross-referenced",
    "title": "7  Rmarkdown-PDF",
    "section": "7.8 Figures (Cross-referenced)",
    "text": "7.8 Figures (Cross-referenced)\n\n7.8.1 Figures created internally\nYou can create plots within an Rmarkdown file and display them in the output PDF file. Here are the steps.\n\nCreate a plot using R\nAdd an R code chunk like this:\n\n```{r fig-sample, fig.cap = \"Sample figure title\"}\nfigure_sample \n```\n\nfigure_sample is a plot (R object).\nfig.cap: \"Sample figure title\" adds Sample figure title as the caption of the figure\nfig-sample is the R chunk label and also the figure id used for cross-referencing\n\n\nUse \\@ref(fig:fig-sample) (fig: appended by the R chunk label) in the rmd file to cross-reference the figure (figure numbering in the output PDF file is automatic).\n\nThe figure in the PDF will have Sample figure title as the figure title.\n\n\n\n\n\n\nImportant\n\n\n\n\nYou cannot use _ in the chunk label (- is allowed). Cross-referencing would not work if the label includes _.\n\n\n\n\n\n\n\n\n\nRmarkdown-PDF Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nPDF\n\n\n\n\n\n\n\n\n\n7.8.2 Importing pre-made figures\nTo incorporate pre-made images or figures into your Rmarkdown document, especially when they are not generated within the Rmarkdown itself, you can use the knitr::include_graphics() function.\nYou can use the knitr::include_graphics() function to insert your desired image.\n```{r fig-your-label, fig.cap = \"Your Figure Caption\"}\nknitr::include_graphics(\"path_to_your_image.png\")\n```\nImported figures can be cross-referenced just like figures generated within R, as demonstrated previously.\n\n\n7.8.3 Figure placement and size\nYou can control the size of the plots in the output PDF file using the fig.width or fig.height option in the R code chunk. You can control the alignment of a figure using the fig.align. See an example below:\n```{r fig-lable, fig.cap = \"Title\", fig.width = 6, fig.height = 4}\nfigure_sample \n```",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#mathematical-equations",
    "href": "C2_3_Rmarkdown_PDF.html#mathematical-equations",
    "title": "7  Rmarkdown-PDF",
    "section": "7.9 Mathematical Equations",
    "text": "7.9 Mathematical Equations\n\n7.9.1 Basics\nYou can fully take advantage of Latex math typesetting capability unlike the Rmarkdown-WORD system. This is because whatever you type inside of the following will be printed as is in the tex file when rmd file is converted to a tex file.\n```{=tex}\nwhatever you type\n```\nSo, for example, if you have the following in your rmd file,\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\n```\nthen you will the following printed in the tex file,\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\n, which will then appear as\n\\[\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon\n\\end{equation}\\]\nin the compiled pdf file.\nOf course, you can use other environments like align,\n```{=tex}\n\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\n\\end{align}\n```\n\\[\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\n\\end{align}\\]\n\n\n7.9.2 Cross-reference\nThere are two ways to cross-reference equations. The first option is to place (\\#eq:equation-name) at the end of the line that you would like to cross-reference. For example, (\\#eq:eqn1) is placed at the end of the equation below.\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon (\\#eq:eqn1)\n\\end{equation}\n```\nYou can then write \\@ref(eq:eqn1) to refer to the equation number.\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, you can do cross-reference as if you would do in a tex file. Specifically, you can add \\label{equation-name} at the end of the line and then write \\ref{equation-name}.\n```{=tex}\n\\begin{equation}\ny = \\beta_0 + \\beta_1 x + \\varepsilon \\label{eq-tex}\n\\end{equation}\n```\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJust like Latex, you can use \\notag to suppress equation numbers. You can cross-reference individual lines.\n```{=tex}\n\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z \\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z (\\#eq:al-second)\n\\end{align}\n```\n\nEquation \\@ref(eq:al-second) is the second line.\n\n\n\n\n\n\nRmarkdown-Latex Comparison: Visual Example",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_3_Rmarkdown_PDF.html#misccelaneous",
    "href": "C2_3_Rmarkdown_PDF.html#misccelaneous",
    "title": "7  Rmarkdown-PDF",
    "section": "7.10 Misccelaneous",
    "text": "7.10 Misccelaneous\n\n7.10.1 Section number\nSometimes, you would like to have no section number for some of the sections. You can suppress section numbers by adding either {-} or {.unnumbered} at the end of the section title like below.\n# Tables {-}\n\n\n7.10.2 Appendix\nIn order to have Appendix separate from the main narrative, you can start it by adding # (APPENDIX) Appendix {-} in the rmd file. Then the rest of the paper is considered a part of the Appendix section of the paper. By default, when you start a new section using #, then capitalized alphabets are used as the section indicator.\nFor example,\n# (APPENDIX) Appendix {-}\n\n# Additional Analysis\nwould translate into the following in the output pdf file.\n\n\n\n\n\n\n\n\n\n\n\nNote that Appendix is not printed.\n\nConfirm this by comparing sample_to_pdf.rmd and sample_to_pdf.pdf.\n\n\n\n7.10.3 Figure numbering for Appendix\nSince you can include Latex code to an Rmarkdown file, you can include Latex codes to achieve figure numbering that is separate from the main narrative. For example, the following code will add A. before figure number.\n```{=Tex}\n\\setcounter{figure}{0}\n\\renewcommand{\\thefigure}{A.\\arabic{figure}}\n```",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rmarkdown-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#before-you-start",
    "href": "C2_4_Quarto_PDF.html#before-you-start",
    "title": "8  Quarto-PDF",
    "section": "8.1 Before you start",
    "text": "8.1 Before you start\nTo author a full journal article using Quarto, you’ll need to acquire or have familiarity with the following skills:\n\n\n\n\n\n\nImportant\n\n\n\n\nBasic knowledge of how Quarto works (Official Website).\nCreate figures using R (any R package, like ggplot2)\nCreate tables using R with select R packages that are compatible with Latex-PDF output (e.g., huxtable, kableExtra, modelsummary, gtsummary)\nFamiliarity with basic debugging of Latex codes (highly preferable).\n\n\n\nBefore delving into this chapter, carefully consider the time and effort required to master these skills. Ensure the investment aligns with your goals and priorities.\nWhile you can generate a PDF article without LaTeX expertise, it’s strongly advised to familiarize yourself with LaTeX debugging. This not only aids in customizing the article format but also prepares you for potential compilation errors you might face.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#preparation",
    "href": "C2_4_Quarto_PDF.html#preparation",
    "title": "8  Quarto-PDF",
    "section": "8.2 Preparation",
    "text": "8.2 Preparation\nBefore diving in, please do the followings:\n\nGo here and download all the files including sample_to_pdf.qmd, which we refer to as the sample rmd file throughout this chapter.\nAlternatively, you can clone this Github repository and go to the Resources/PDF-Quarto/ folder.\nOpen RStudio (or any other software you you may be using like VS code) and knit sample_to_pdf.qmd to produce sample_to_qmd.pdf, which we refer to as the sample PDF file.\nInstall the following packages if you have not\n\nknitr\nRmarkdown\ntidyverse\nmodelsummary\ngtsummary\nhuxtable\nkableExtra",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#yaml-header",
    "href": "C2_4_Quarto_PDF.html#yaml-header",
    "title": "8  Quarto-PDF",
    "section": "8.3 YAML header",
    "text": "8.3 YAML header\nA Quarto file starts with a YAML header, which lets you specify things like\n\npaper title\nauthors (with affiliations and other subsidiary information)\ndate\nabstract\n\nIt also lets you specify various aspects of the output PDF file including\n\nwhether to include table of contents (toc)\nthe depth of table of contents (toc_depth)\nwhether to number sections or not (number_sections)\nhow to display plots and tables\n\nsize\nalignment\n\n\nThis is also where you specify what files you use as bibliography, citation style, among other things. Important ones will be introduced later.\nHere is an example YAML header, which you can see in sample_to_pdf.qmd file.\n\n\n\n\n\n\n\n\n\n\n\nFull list of options can be found here. More detailed explanation of some of the output options will be provided later individually when the relevant topics are discussed.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#control-the-style-and-format",
    "href": "C2_4_Quarto_PDF.html#control-the-style-and-format",
    "title": "8  Quarto-PDF",
    "section": "8.4 Control the style and format",
    "text": "8.4 Control the style and format\nYou can insert raw tex codes as a file or text to the tex file that would be later compiled to a pdf (see the official instruction here).\nFor example, the sample qmd file includes “preamble.tex” in the header by having the following lines in the YAML.\n\n\n\n\n\n\n\n\n\n\n\n“preamble.tex” has the following as its content.\n\n\n\n\n\n\n\n\n\n\n\nFor example, it adds line numbers to the output pdf file with\n\\usepackage{lineno}\n\\linenumbers",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#using-existing-journal-templates",
    "href": "C2_4_Quarto_PDF.html#using-existing-journal-templates",
    "title": "8  Quarto-PDF",
    "section": "8.5 Using existing journal templates",
    "text": "8.5 Using existing journal templates\nTo streamline the formatting and styling of your article, first check if a template for your target journal is available. Browse the list of existing journal templates on this GitHub repository. If the desired template is available, you are in luck! Utilizing it can save significant time since these templates are crafted to meet journal specifications.\nLet’s walk through the process of using the American Geophysical Union (agu) template. To get started with the AGU journal template using Quarto:\n\nInstall the Extension: Follow the instructions provided on the GitHub page. Begin by installing the extension through your terminal:\nquarto add quarto-journals/agu\nSet Up Your Project: Navigate to the directory where you want to create your new project using the cd command. Then, initialize the template:\nquarto use template quarto-journals/agu\nThis action will display an output on your terminal, similar to:\n\n\n\n\n\n\n\n\n\n\n\nHere, input the desired directory name (in this example, ‘agu-ex’). A folder with the given name will be created in your current directory.\nStart Writing: Now you’re good to go! Open the template .qmd file in the newly created directory and begin drafting your article.\n\n\n\n\n\n\n\nImportant\n\n\n\n\nPlease do not delete the “_extensions” folder, which includes files that are necessary to a produce AGU-compatible PDF.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#citations-and-references",
    "href": "C2_4_Quarto_PDF.html#citations-and-references",
    "title": "8  Quarto-PDF",
    "section": "8.6 Citations and References",
    "text": "8.6 Citations and References\n\n8.6.1 Set up\nBegin by preparing a file that contains all your references. In your document’s YAML header, specify the bibliography file:\n\nbibliography: bibliography file name\n\nThere are multiple formats and systems available for bibliographies, such as BibLaTeX/BibTex (.bib), CSL-JSON (.json), and EndNote (.enl). among others.\nIn this illustration, we are employing a .bib file. If our bibliography file is titled bibliography.bib, the YAML header would look like:\n\n\n\n\n\n\n\n\n\n\n\nWhen knitting to PDF, the references will be positioned at the conclusion of the document, as documented (see here). Append # References {-} to the tail end of your .qmd file. This creates a “References” section heading where all the citations will be listed. Including {-} adjacent to the section header ensures the References section remains unnumbered. This is particularly useful if you have activated section numbering in the YAML header with number-sections: true. Without {-}, the “References” section would be automatically numbered, which is often not desired in academic and professional documents.\n\n\n\n\n\n\nNote\n\n\n\n\nSee the sample qmd file to see how bibliography file is specified in the YAML header\nConfirm that the Reference section of the sample qmd and PDF files\n\n\n\n\n\n\n8.6.2 Cite and create references\nTo cite, use the following syntax:\n\n@reference_name to print “author names (year)” in the output WORD file\n[@reference_name] to print “(author names, year)” in the output WORD file\n[@reference_name_1; @reference_name_2] to print “(author names, year; author names, year)” in the output WORD file\n[-@reference_name] to print just year\n\nreference_name is the very first entry of a .bib file as in\n\n\n\n\n\n\n\n\n\n\n\nIf you are using CSL json file, then it is the id of an entry as in\n\n\n\n\n\n\n\n\n\n\n\nThe cited items are automatically added to the reference following the specified style (see the next section).\n\n\n\n\n\n\nNote\n\n\n\n\nSee the Introduction and Reference sections in the sample qmd and PDF files to confirm this rule.\nComment out bibliography: bibliography.bib and uncomment bibliography: bibliography.json, knit again, and check citations and references are still there. This is just an illustration of using a different bibliography file (CSL-json file).\n\n\n\n\n\n\n8.6.3 Citation and Reference Style\nYou can change the citation and reference style using Citation Style Language. Citation style files have .csl extension.\n\nObtain the csl file you would like to use from the Zotero citation style repository.\nPlace the following in the YAML header:\n\n\ncsl: csl file name \n\n\nThen, when knitted, citations and references styles reflect the style specified by the csl file\n\nCurrently, the csl style is set to qje.csl (citation style language for The Quarterly Journal of Economics) as below\n\n\n\n\n\n\n\n\n\n\n\nCitation and references styles in the output PDF file follows the rules for the QJE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for QJE\n\n\n\n\n\n\n\nReference style for QJE\n\n\n\n\n\n\n\nNow, comment csl: qje.csl and uncomment csl: pnas.csl so that the CSL for the Proceedings of the National Academy of Sciences (PNAS) is used, and then knit the sample qmd file.\nYou can now see that the citation style no longer respects the rules I mentioned above and also the reference style follows that of PNAS. This is because PNAS uses only numbers, but not author names or years.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitation style for PNAS\n\n\n\n\n\n\n\nReference style for PNAS",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#tables-cross-referenced",
    "href": "C2_4_Quarto_PDF.html#tables-cross-referenced",
    "title": "8  Quarto-PDF",
    "section": "8.7 Tables (Cross-referenced)",
    "text": "8.7 Tables (Cross-referenced)\n\nCreate a table using any R package that can produce latex tables.\nAdd an R code chunk like this:\n\n```{r}\n#| label: tbl-id\n#| tble-cap: \"Sample table caption\"\ntable_sample\n```\n\ntable_sample is the name of the table created on R.\nSample table caption is the caption of the table in the output PDF file\ntbl-id is the chunk label you can use to cross-reference the table\n\n\nUse @tbl-id in the Quarto file to cross-reference the table (table numbering in the output PDF file is automatic).\n\nThe table in the PDF will have Sample table title as the tabe title. @tab-sample will append “Table” automatically. So, if you have Table @tbl-sample in your qmd file, then you will see “Table Table figure-number” in the output PDF file.\n\n\n\n\n\n\nImportant\n\n\n\n\nlabel needs to start with tbl-, otherwise, the output of the chink would not be recognized as a table.\nYou cannot use _ in label (- is allowed). Cross-referencing would not work if label includes _.\n\n\n\n\n8.7.1 Packages to create tables\n\n\n8.7.1.1 Simple table from a data.frame\nThere are many R packages that let you create tables that are compatible with Latex. For example, you can use the kableExtra and huxtable package to create tables from a data.frame-like R objects from scratch. Here is an example code using the huxtable package.\n\nlibrary(huxtable)\n\nhead(iris, 10) %&gt;%\n# Create a huxtable\nas_hux() %&gt;%\n# Add some basic styling\nset_background_color(row = 1, value = \"lightgray\") # Background color for header\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3  \n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5  \n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n5  \n3.4\n1.5\n0.2\nsetosa\n\n\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n4.9\n3.1\n1.5\n0.1\nsetosa\n\n\n\n\n\n\n\nThe gt package does not work as well with Latex as it does with the html output1. In academic journals, fancy looking tables are not necessary. kableExtra and huxtable are likely to be very much sufficient.\n\n\n\n8.7.1.2 Regressions results and summary tables\nFor regression results and summary statics, the modelsummary and gtsummary2 packages are particularly convenient and useful. For example, the modelsummary package lets you create regression results and summary statistics tables via the modelsummary() function and summary statistics tables via the datasummary() function3. For the gtsummary package, their respective corresponding functions are tbl_regression and tbl_summary. For regression results tables, the stargazer package is also a viable option. It is less capable in creating summary statistics tables than modelsummary and gtsummary.\nHere are example R codes of using the modelsummary package to create regression results and summary statistics tables.\nRegression table\n\n#--- regressions ---#\nlm_1 &lt;- fixest::feols(mpg ~ hp + cyl, data = mtcars)\nlm_2 &lt;- fixest::feols(mpg ~ hp + cyl + wt, data = mtcars)\nlm_3 &lt;- fixest::feols(mpg ~ hp + cyl + wt, cluster = ~ vs, data = mtcars)\n\n#--- create a regression results table ---#\nmodelsummary::modelsummary(\n  list(lm_1, lm_2, lm_3),\n  gof_omit = \"IC|Log|Adj|F|Pseudo|Within\"\n)\n\nThis is how the table would appear on the output PDF file.\n\n\n\n\n\n\n\n\n\n\n\nSummary statistics table\n\nmodelsummary::datasummary(\n  mpg + hp + cyl ~ Mean + SD,\n  data = mtcars\n)\n\nThis is how the table would appear on the output PDF file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.7.1.3 Further modifying regression and summary statistics tables\nYou can modify (fine-tune) the output of modelsummary or gtsummary using the huxtable package if you are not satisfied. For the modelsummary package, this can be done by using output = \"huxtable\" and then use huxtable functions for modifications. Here is an example code.\n\nlibrary(huxtable)\n\nmodelsummary(list(lm_1, lm_2, lm_3),\n output = \"huxtable\",\n gof_omit = \"IC|Log|Adj|F|Pseudo|Within\",\n stars = TRUE\n) %&gt;%\n# Bold the header row\n# set_bold(row = 1) %&gt;%\n# Border at the bottom of the table\nset_bottom_border(row = nrow(.), value = 0.4) %&gt;%\n# Center-align the header\nset_align(1, everywhere, value = \"center\") %&gt;%\n# Set font size to 10\nset_font_size(value = 10) \n\nFor the gtsummary package, you can apply as_hux_table() and then modify the table.\nHere is an example code for using the kableExtra package.\n\nmodelsummary(list(lm_1, lm_2, lm_3),\n  output = \"kableExtra\",\n  gof_omit = \"IC|Log|Adj|F|Pseudo|Within\",\n  stars = TRUE\n) %&gt;%\n  kableExtra::add_header_above(\n    c(\" \" = 1, \"Model (se not clustered) \" = 2, \"Model (se clustered)\" = 1)\n  )\n\n\n\n\n8.7.2 Avoid “Not in outer par mode” error\nFor some tables, you may encounter the following error while compiling the tex file created in the process (see here).\n\n\n\n\n\n\n\n\n\n\n\nYou can avoid this problem by adding the following tex codes in the preamble.\n\\usepackage{float}\n\\floatplacement{figure}{H}\n\\floatplacement{table}{H}\nIn the sample qmd file, this is done by having the above lines in a file named “preamble.tex” and calling it in the YAML like below.\n\n\n\n\n\n\n\n\n\n\n\nOf course, with these float options, tables and figures will appear exactly where they are created or called in the qmd file.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#figures-cross-referenced",
    "href": "C2_4_Quarto_PDF.html#figures-cross-referenced",
    "title": "8  Quarto-PDF",
    "section": "8.8 Figures (Cross-referenced)",
    "text": "8.8 Figures (Cross-referenced)\n\n8.8.1 Figures created internally\nYou can create plots within a Quarto file and display them in the output PDF file. Here are the steps.\n\nCreate a plot using R\nAdd an R code chunk like this:\n\n```{r}\n#| label: fig-sample\n#| fig-cap: \"Sample figure title\"\nfigure_sample \n```\n\nfigure_sample is a plot.\nfig-cap: \"Sample figure title\" adds Sample figure title as the caption of the figure\nfig-sample is the figure id used for cross-referencing\n\n\nUse @fig-sample (the chunk label specified in label: fig-sample) in the qmd file to cross-reference the figure (figure numbering in the output PDF file is automatic).\n\nThe figure in the PDF will have Sample figure title as the figure title. @fig-sample will append “Figure” automatically. So, if you have Figure @fig-sample in your qmd file, then you will see “Figure Figure figure-number” in the output PDF file.\n\n\n\n\n\n\nRmarkdown-PDF Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nPDF\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nDo not forget to have fig- at the beginning of the chunk label as in label: fig-sample in the R code chunk option. Otherwise, the plot will not be recognized as a figure in the output PDF file and cross-referencing will not work even though the figure will be displayed.\nYou cannot use _ in the chunk label (- is allowed). Cross-referencing would not work if the label includes _.\n\n\n\n\nlocation of the caption\n\n\n\n8.8.2 Importing pre-made figures\nTo incorporate pre-made images or figures into your Quarto document, especially when they are not generated within the itself, you can use the knitr::include_graphics() function.\nYou can use the knitr::include_graphics() function to insert your desired image.\n```{r }\n#| label: \"fig-your-label\"\n#| fig-cap: Your Figure Caption\nknitr::include_graphics(\"path_to_your_image.png\")\n```\nImported figures can be cross-referenced just like figures generated within R, as demonstrated previously.\n\n\n\n\n\n\nqmd-PDF Comparison: Visual Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRmarkdown\n\n\n\n\n\n\n\nWORD\n\n\n\n\n\n\n\n\n\n8.8.3 Figure placement\n\n\n8.8.4 Change the size of the figure\nYou can control the size of the plots in the output PDF file using the out.width or out.height option in the R code chunk.\n\n\n\n\n\n\nTry\n\n\n\n\nChange out.width to 2 and see what happens to the output WORD file.\nRemove the fig.cap option and see what happens to the output WORD file.\nChange the dpi value to 100 see what happens to the output WORD file.",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  },
  {
    "objectID": "C2_4_Quarto_PDF.html#mathematical-equations",
    "href": "C2_4_Quarto_PDF.html#mathematical-equations",
    "title": "8  Quarto-PDF",
    "section": "8.9 Mathematical equations",
    "text": "8.9 Mathematical equations\nYou can take the full advantage of Latex’s advanced math typesetting capability to write mathematical equations unlike the rmd-to-WORD option.\n\n8.9.1 Math equation with different environments\nTo type mathematical equations, you can simply put bare latex math expressions in the qmd file. Alternatively, you could enclose the math expressions with a special syntax for printing tex expressions like below.\n```{=tex}\nMath\n```\nLet’s take a look at several popular math environments.\n\nequation environment\n```{=tex}\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n\\end{equation}\n```\nprints like below in the output PDF file.\n\\[\n\\begin{equation}\n\\bar{y} = \\sum_{i=1}^n y_i\n\\end{equation}\n\\]\n\ncases environment inside an equation environment\n```{=tex}\n\\begin{equation}\ny_{j,i} =\n  \\begin{cases}\n  \\alpha_{j,i} + \\beta_{j,i} N + \\gamma_{j,i} N^2 + \\varepsilon_{j,i} \\, ,& N &lt; \\tau_{j,i} \\\\\n  \\alpha_{j,i} + \\beta_{j,i} \\tau_{j,i} + \\gamma_{j,i} \\tau_{j,i}^2 + \\varepsilon_{j,i} \\, ,& N \\ge \\tau_{j,i}\n  \\end{cases}\n\\end{equation}\n```\n\\[\n\\begin{equation}\ny_{j,i} =\n  \\begin{cases}\n  \\alpha_{j,i} + \\beta_{j,i} N + \\gamma_{j,i} N^2 + \\varepsilon_{j,i} \\, ,& N &lt; \\tau_{j,i} \\\\\n  \\alpha_{j,i} + \\beta_{j,i} \\tau_{j,i} + \\gamma_{j,i} \\tau_{j,i}^2 + \\varepsilon_{j,i} \\, ,& N \\ge \\tau_{j,i}\n  \\end{cases}\n\\end{equation}\n\\]\n\nalign environment\n```{=tex}\n\\begin{align}\n AR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\n Y_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\n```\nprints like below in the output PDF file.\n\\[\n\\begin{align}\nAR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\nY_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\n\\]\n\n\n8.9.2 Cross-reference equations\nIn the official Quarto documentation, they present an example of cross-referencing an equation for a math written between \\(\\$\\$\\) and \\(\\$\\$\\), which is another way of writing an equation. However, the complexity of equations that can be written in this manner is rather limited. As of now (2023-10-24), if you try this way of cross-referencing for environments like align, it would not work.\nThis one works.\n```{=tex}\n$$\n\\bar{y} = \\sum_{i=1}^n y_i\n$$ {#eq-simple}\n```\nBut, this one would not (Try it yourself. It is not tested in our sample qmd file because it would cause a compilation error.).\n```{=tex}\n$$\n\\begin{align}\n AR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\n Y_{i} &= c + \\phi_i Y_{i-1} \\dots\n\\end{align}\n$$ {#eq-align}\n```\nThis one neither.\n```{=tex}\n$$\n AR(p): Y_i &= c + \\epsilon_i + \\phi_i Y_{i-1} \\dots \\\\\n Y_{i} &= c + \\phi_i Y_{i-1} \\dots\n$$ {#eq-align}\n```\nInstead, we could cross-reference equations the Latex way, taking full advantage of the fact that raw tex codes are accepted. For example, this would work.\n```{=tex}\n\\begin{align}\nY_z & = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z \\notag \\\\\n& = \\sum_{i=1}^k \\phi_k(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z \\label{eq-align}\n\\end{align}\n```\nThen, use \\ref{eq-align} to cross-reference it. You can confirm this in the Statistical Model section of the sample qmd file.\n\n\n\n\n\n\nqmd-PDF comparison: visual example of cros-referenced equations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nqmd\n\n\n\n\n\n\n\nPDF\n\n\n\n\n\n\n\n\n\n8.9.3 In-line math\nTo write a mathematical expression in line, you can enclose a math expression by $ like below.\nOur model is written as $Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z$.\nThis should appear like below in the output PDF file.\nOur model is written as \\(Y_z = f_z(S) + g_z(N) + h_z(X,Y) + \\varepsilon_z\\).\n\n\n\n\n\n\nqmd-PDF comparison: visual example of inline math\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nqmd\n\n\n\n\n\n\n\nPDF",
    "crumbs": [
      "Manuscript Writing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quarto-PDF</span>"
    ]
  }
]